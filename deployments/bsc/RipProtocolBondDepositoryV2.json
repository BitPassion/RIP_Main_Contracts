{
  "address": "0x5f477Ff61079018Ff85Dc12fa49869C1E3E3B442",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "contract IRipProtocolAuthority",
          "name": "_authority",
          "type": "address"
        },
        {
          "internalType": "contract IERC20",
          "name": "_rip",
          "type": "address"
        },
        {
          "internalType": "contract IgRIP",
          "name": "_grip",
          "type": "address"
        },
        {
          "internalType": "contract IStaking",
          "name": "_staking",
          "type": "address"
        },
        {
          "internalType": "contract ITreasury",
          "name": "_treasury",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "contract IRipProtocolAuthority",
          "name": "authority",
          "type": "address"
        }
      ],
      "name": "AuthorityUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "price",
          "type": "uint256"
        }
      ],
      "name": "Bond",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        }
      ],
      "name": "CloseMarket",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "baseToken",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "quoteToken",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "initialPrice",
          "type": "uint256"
        }
      ],
      "name": "CreateMarket",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint64",
          "name": "oldControlVariable",
          "type": "uint64"
        },
        {
          "indexed": false,
          "internalType": "uint64",
          "name": "newControlVariable",
          "type": "uint64"
        }
      ],
      "name": "Tuned",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "adjustments",
      "outputs": [
        {
          "internalType": "uint64",
          "name": "change",
          "type": "uint64"
        },
        {
          "internalType": "uint48",
          "name": "lastAdjustment",
          "type": "uint48"
        },
        {
          "internalType": "uint48",
          "name": "timeToAdjusted",
          "type": "uint48"
        },
        {
          "internalType": "bool",
          "name": "active",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "authority",
      "outputs": [
        {
          "internalType": "contract IRipProtocolAuthority",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_id",
          "type": "uint256"
        }
      ],
      "name": "close",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IERC20",
          "name": "_quoteToken",
          "type": "address"
        },
        {
          "internalType": "uint256[3]",
          "name": "_market",
          "type": "uint256[3]"
        },
        {
          "internalType": "bool[2]",
          "name": "_booleans",
          "type": "bool[2]"
        },
        {
          "internalType": "uint256[2]",
          "name": "_terms",
          "type": "uint256[2]"
        },
        {
          "internalType": "uint32[2]",
          "name": "_intervals",
          "type": "uint32[2]"
        }
      ],
      "name": "create",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "id_",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_id",
          "type": "uint256"
        }
      ],
      "name": "currentControlVariable",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_id",
          "type": "uint256"
        }
      ],
      "name": "currentDebt",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "daoReward",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_id",
          "type": "uint256"
        }
      ],
      "name": "debtDecay",
      "outputs": [
        {
          "internalType": "uint64",
          "name": "",
          "type": "uint64"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_id",
          "type": "uint256"
        }
      ],
      "name": "debtRatio",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_id",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_maxPrice",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_user",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_referral",
          "type": "address"
        }
      ],
      "name": "deposit",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "payout_",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "expiry_",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "index_",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getReward",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_user",
          "type": "address"
        }
      ],
      "name": "indexesFor",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_id",
          "type": "uint256"
        }
      ],
      "name": "isLive",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "liveMarkets",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_token",
          "type": "address"
        }
      ],
      "name": "liveMarketsFor",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_id",
          "type": "uint256"
        }
      ],
      "name": "marketPrice",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "markets",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "capacity",
          "type": "uint256"
        },
        {
          "internalType": "contract IERC20",
          "name": "quoteToken",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "capacityInQuote",
          "type": "bool"
        },
        {
          "internalType": "uint64",
          "name": "totalDebt",
          "type": "uint64"
        },
        {
          "internalType": "uint64",
          "name": "maxPayout",
          "type": "uint64"
        },
        {
          "internalType": "uint64",
          "name": "sold",
          "type": "uint64"
        },
        {
          "internalType": "uint256",
          "name": "purchased",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "marketsForQuote",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "metadata",
      "outputs": [
        {
          "internalType": "uint48",
          "name": "lastTune",
          "type": "uint48"
        },
        {
          "internalType": "uint48",
          "name": "lastDecay",
          "type": "uint48"
        },
        {
          "internalType": "uint48",
          "name": "length",
          "type": "uint48"
        },
        {
          "internalType": "uint48",
          "name": "depositInterval",
          "type": "uint48"
        },
        {
          "internalType": "uint48",
          "name": "tuneInterval",
          "type": "uint48"
        },
        {
          "internalType": "uint8",
          "name": "quoteDecimals",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "notes",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "payout",
          "type": "uint256"
        },
        {
          "internalType": "uint48",
          "name": "created",
          "type": "uint48"
        },
        {
          "internalType": "uint48",
          "name": "matured",
          "type": "uint48"
        },
        {
          "internalType": "uint48",
          "name": "redeemed",
          "type": "uint48"
        },
        {
          "internalType": "uint48",
          "name": "marketID",
          "type": "uint48"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_id",
          "type": "uint256"
        }
      ],
      "name": "payoutFor",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_user",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_index",
          "type": "uint256"
        }
      ],
      "name": "pendingFor",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "payout_",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "matured_",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_from",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_index",
          "type": "uint256"
        }
      ],
      "name": "pullNote",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "newIndex_",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_index",
          "type": "uint256"
        }
      ],
      "name": "pushNote",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_user",
          "type": "address"
        },
        {
          "internalType": "uint256[]",
          "name": "_indexes",
          "type": "uint256[]"
        },
        {
          "internalType": "bool",
          "name": "_sendgRIP",
          "type": "bool"
        }
      ],
      "name": "redeem",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "payout_",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_user",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "_sendgRIP",
          "type": "bool"
        }
      ],
      "name": "redeemAll",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "refReward",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "rewards",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IRipProtocolAuthority",
          "name": "_newAuthority",
          "type": "address"
        }
      ],
      "name": "setAuthority",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_toFrontEnd",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_toDAO",
          "type": "uint256"
        }
      ],
      "name": "setRewards",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "terms",
      "outputs": [
        {
          "internalType": "bool",
          "name": "fixedTerm",
          "type": "bool"
        },
        {
          "internalType": "uint64",
          "name": "controlVariable",
          "type": "uint64"
        },
        {
          "internalType": "uint48",
          "name": "vesting",
          "type": "uint48"
        },
        {
          "internalType": "uint48",
          "name": "conclusion",
          "type": "uint48"
        },
        {
          "internalType": "uint64",
          "name": "maxDebt",
          "type": "uint64"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "updateTreasury",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_operator",
          "type": "address"
        }
      ],
      "name": "whitelist",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "whitelisted",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x533c202d1bcf1534bd7d8d1ae0dda48b606b8430f6c3fb4b6f605aa4ebcf4685",
  "receipt": {
    "to": null,
    "from": "0x6e01e581514971C048f343259f19e9579d34fb20",
    "contractAddress": "0x5f477Ff61079018Ff85Dc12fa49869C1E3E3B442",
    "transactionIndex": 82,
    "gasUsed": "3830237",
    "logsBloom": "0x
    "blockHash": "0xf882f72ebfd71d1723a7361cb88891deec53e639e4a8991d5dc0b31649aa8e9e",
    "transactionHash": "0x533c202d1bcf1534bd7d8d1ae0dda48b606b8430f6c3fb4b6f605aa4ebcf4685",
    "logs": [
      {
        "transactionIndex": 82,
        "blockNumber": 16596053,
        "transactionHash": "0x533c202d1bcf1534bd7d8d1ae0dda48b606b8430f6c3fb4b6f605aa4ebcf4685",
        "address": "0x5f477Ff61079018Ff85Dc12fa49869C1E3E3B442",
        "topics": [
          "0x2f658b440c35314f52658ea8a740e05b284cdc84dc9ae01e891f21b8933e7cad",
          "0x00000000000000000000000014f6e58cd42c69e00f1b9d993c8c8d3f4e1f21ff"
        ],
        "data": "0x",
        "logIndex": 256,
        "blockHash": "0xf882f72ebfd71d1723a7361cb88891deec53e639e4a8991d5dc0b31649aa8e9e"
      },
      {
        "transactionIndex": 82,
        "blockNumber": 16596053,
        "transactionHash": "0x533c202d1bcf1534bd7d8d1ae0dda48b606b8430f6c3fb4b6f605aa4ebcf4685",
        "address": "0x03f24aa15371E372C17d3C52Cb922133e4BEdC6F",
        "topics": [
          "0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925",
          "0x0000000000000000000000005f477ff61079018ff85dc12fa49869c1e3e3b442",
          "0x000000000000000000000000f3928f9fdf2a3eddf68fa2798c612d9d8ad0637f"
        ],
        "data": "0x000000000000000000000000002cd76fe086b93ce2f768a00b22a00000000000",
        "logIndex": 257,
        "blockHash": "0xf882f72ebfd71d1723a7361cb88891deec53e639e4a8991d5dc0b31649aa8e9e"
      }
    ],
    "blockNumber": 16596053,
    "cumulativeGasUsed": "17109645",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x14f6E58CD42c69e00f1b9d993C8C8d3F4e1F21fF",
    "0x03f24aa15371E372C17d3C52Cb922133e4BEdC6F",
    "0xE2DFCb820737adAd897696bf58A048C5B933296C",
    "0xf3928f9fDf2a3EdDf68FA2798c612D9d8aD0637F",
    "0x74d5e56A46eab4d3F2BccB470eD614d77AbB1B5C"
  ],
  "solcInputHash": "df3e2e9c1f7c594f42bedba70f3576e4",
  "metadata": "{\"compiler\":{\"version\":\"0.8.10+commit.fc410830\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"contract IRipProtocolAuthority\",\"name\":\"_authority\",\"type\":\"address\"},{\"internalType\":\"contract IERC20\",\"name\":\"_rip\",\"type\":\"address\"},{\"internalType\":\"contract IgRIP\",\"name\":\"_grip\",\"type\":\"address\"},{\"internalType\":\"contract IStaking\",\"name\":\"_staking\",\"type\":\"address\"},{\"internalType\":\"contract ITreasury\",\"name\":\"_treasury\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"contract IRipProtocolAuthority\",\"name\":\"authority\",\"type\":\"address\"}],\"name\":\"AuthorityUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"}],\"name\":\"Bond\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"CloseMarket\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"baseToken\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"quoteToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"initialPrice\",\"type\":\"uint256\"}],\"name\":\"CreateMarket\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"oldControlVariable\",\"type\":\"uint64\"},{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"newControlVariable\",\"type\":\"uint64\"}],\"name\":\"Tuned\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"adjustments\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"change\",\"type\":\"uint64\"},{\"internalType\":\"uint48\",\"name\":\"lastAdjustment\",\"type\":\"uint48\"},{\"internalType\":\"uint48\",\"name\":\"timeToAdjusted\",\"type\":\"uint48\"},{\"internalType\":\"bool\",\"name\":\"active\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"authority\",\"outputs\":[{\"internalType\":\"contract IRipProtocolAuthority\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"}],\"name\":\"close\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"_quoteToken\",\"type\":\"address\"},{\"internalType\":\"uint256[3]\",\"name\":\"_market\",\"type\":\"uint256[3]\"},{\"internalType\":\"bool[2]\",\"name\":\"_booleans\",\"type\":\"bool[2]\"},{\"internalType\":\"uint256[2]\",\"name\":\"_terms\",\"type\":\"uint256[2]\"},{\"internalType\":\"uint32[2]\",\"name\":\"_intervals\",\"type\":\"uint32[2]\"}],\"name\":\"create\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"id_\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"}],\"name\":\"currentControlVariable\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"}],\"name\":\"currentDebt\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"daoReward\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"}],\"name\":\"debtDecay\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"}],\"name\":\"debtRatio\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_maxPrice\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_referral\",\"type\":\"address\"}],\"name\":\"deposit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"payout_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"expiry_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"index_\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getReward\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"indexesFor\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"}],\"name\":\"isLive\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"liveMarkets\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"liveMarketsFor\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"}],\"name\":\"marketPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"markets\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"capacity\",\"type\":\"uint256\"},{\"internalType\":\"contract IERC20\",\"name\":\"quoteToken\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"capacityInQuote\",\"type\":\"bool\"},{\"internalType\":\"uint64\",\"name\":\"totalDebt\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"maxPayout\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"sold\",\"type\":\"uint64\"},{\"internalType\":\"uint256\",\"name\":\"purchased\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"marketsForQuote\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"metadata\",\"outputs\":[{\"internalType\":\"uint48\",\"name\":\"lastTune\",\"type\":\"uint48\"},{\"internalType\":\"uint48\",\"name\":\"lastDecay\",\"type\":\"uint48\"},{\"internalType\":\"uint48\",\"name\":\"length\",\"type\":\"uint48\"},{\"internalType\":\"uint48\",\"name\":\"depositInterval\",\"type\":\"uint48\"},{\"internalType\":\"uint48\",\"name\":\"tuneInterval\",\"type\":\"uint48\"},{\"internalType\":\"uint8\",\"name\":\"quoteDecimals\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"notes\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"payout\",\"type\":\"uint256\"},{\"internalType\":\"uint48\",\"name\":\"created\",\"type\":\"uint48\"},{\"internalType\":\"uint48\",\"name\":\"matured\",\"type\":\"uint48\"},{\"internalType\":\"uint48\",\"name\":\"redeemed\",\"type\":\"uint48\"},{\"internalType\":\"uint48\",\"name\":\"marketID\",\"type\":\"uint48\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"}],\"name\":\"payoutFor\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_index\",\"type\":\"uint256\"}],\"name\":\"pendingFor\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"payout_\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"matured_\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_index\",\"type\":\"uint256\"}],\"name\":\"pullNote\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"newIndex_\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_index\",\"type\":\"uint256\"}],\"name\":\"pushNote\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"_indexes\",\"type\":\"uint256[]\"},{\"internalType\":\"bool\",\"name\":\"_sendgRIP\",\"type\":\"bool\"}],\"name\":\"redeem\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"payout_\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_sendgRIP\",\"type\":\"bool\"}],\"name\":\"redeemAll\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"refReward\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"rewards\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IRipProtocolAuthority\",\"name\":\"_newAuthority\",\"type\":\"address\"}],\"name\":\"setAuthority\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_toFrontEnd\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_toDAO\",\"type\":\"uint256\"}],\"name\":\"setRewards\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"terms\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"fixedTerm\",\"type\":\"bool\"},{\"internalType\":\"uint64\",\"name\":\"controlVariable\",\"type\":\"uint64\"},{\"internalType\":\"uint48\",\"name\":\"vesting\",\"type\":\"uint48\"},{\"internalType\":\"uint48\",\"name\":\"conclusion\",\"type\":\"uint48\"},{\"internalType\":\"uint64\",\"name\":\"maxDebt\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"updateTreasury\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_operator\",\"type\":\"address\"}],\"name\":\"whitelist\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"whitelisted\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"author\":\"Zeus, Indigo Review by: JeffX\",\"kind\":\"dev\",\"methods\":{\"close(uint256)\":{\"params\":{\"_id\":\"ID of market to close\"}},\"create(address,uint256[3],bool[2],uint256[2],uint32[2])\":{\"details\":\"current price should be in 9 decimals.\",\"params\":{\"_booleans\":\"[capacity in quote, fixed term]\",\"_intervals\":\"[deposit interval (seconds), tune interval (seconds)]\",\"_market\":\"[capacity (in RIP or quote), initial price / RIP (9 decimals), debt buffer (3 decimals)]\",\"_quoteToken\":\"token used to deposit\",\"_terms\":\"[vesting length (if fixed term) or vested timestamp, conclusion timestamp]\"},\"returns\":{\"id_\":\"        ID of new bond market\"}},\"currentControlVariable(uint256)\":{\"details\":\"accounts for control variable adjustment\",\"params\":{\"_id\":\"ID of market\"},\"returns\":{\"_0\":\"control variable for market in RIP decimals\"}},\"currentDebt(uint256)\":{\"details\":\"accounts for debt decay since last deposit\",\"params\":{\"_id\":\"ID of market\"},\"returns\":{\"_0\":\"current debt for market in RIP decimals\"}},\"debtDecay(uint256)\":{\"params\":{\"_id\":\"ID of market\"},\"returns\":{\"_0\":\"amount of debt to decay\"}},\"debtRatio(uint256)\":{\"details\":\"uses current debt, which accounts for debt decay since last deposit (vs _debtRatio())\",\"params\":{\"_id\":\"ID of market\"},\"returns\":{\"_0\":\"debt ratio for market in quote decimals\"}},\"deposit(uint256,uint256,uint256,address,address)\":{\"params\":{\"_amount\":\"the amount of quote token to spend\",\"_id\":\"the ID of the market\",\"_maxPrice\":\"the maximum price at which to buy\",\"_referral\":\"the front end operator address\",\"_user\":\"the recipient of the payout\"},\"returns\":{\"expiry_\":\"    the timestamp at which payout is redeemable\",\"index_\":\"     the user index of the Note (used to redeem or query information)\",\"payout_\":\"    the amount of gRIP due\"}},\"indexesFor(address)\":{\"params\":{\"_user\":\"the user to query notes for\"},\"returns\":{\"_0\":\"the pending notes for the user\"}},\"isLive(uint256)\":{\"params\":{\"_id\":\"ID of market\"}},\"liveMarketsFor(address)\":{\"params\":{\"_token\":\"quote token to check for\"}},\"marketPrice(uint256)\":{\"details\":\"accounts for debt and control variable decay since last deposit (vs _marketPrice())\",\"params\":{\"_id\":\"ID of market\"},\"returns\":{\"_0\":\"price for market in RIP decimals price is derived from the equation p = cv * dr where p = price cv = control variable dr = debt ratio dr = d / s where d = debt s = supply of token at market creation d -= ( d * (dt / l) ) where dt = change in time l = length of program\"}},\"payoutFor(uint256,uint256)\":{\"details\":\"accounts for debt and control variable decay so it is up to date1e18 = rip decimals (9) + market price decimals (9)\",\"params\":{\"_amount\":\"amount of quote tokens to spend\",\"_id\":\"ID of market\"},\"returns\":{\"_0\":\"amount of RIP to be paid in RIP decimals\"}},\"pendingFor(address,uint256)\":{\"params\":{\"_index\":\"the index of the note in the user's array\",\"_user\":\"the user that the note belongs to\"},\"returns\":{\"matured_\":\"   if the payout can be redeemed\",\"payout_\":\"    the payout due, in gRIP\"}},\"pullNote(address,uint256)\":{\"params\":{\"_from\":\"the address that approved the note transfer\",\"_index\":\"the index of the note to transfer (in the sender's array)\"}},\"pushNote(address,uint256)\":{\"params\":{\"_index\":\"index of note to approve transfer for\",\"_to\":\"address to approve note transfer for\"}},\"redeem(address,uint256[],bool)\":{\"params\":{\"_indexes\":\"the note indexes to redeem\",\"_sendgRIP\":\"send payout as gRIP or sRIP\",\"_user\":\"the user to redeem for\"},\"returns\":{\"payout_\":\"    sum of payout sent, in gRIP\"}},\"redeemAll(address,bool)\":{\"details\":\"if possible, query indexesFor() off-chain and input in redeem() to save gas\",\"params\":{\"_sendgRIP\":\"send payout as gRIP or sRIP\",\"_user\":\"user to redeem all notes for\"},\"returns\":{\"_0\":\"sum of payout sent, in gRIP\"}}},\"title\":\"RipProtocol Bond Depository V2\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"close(uint256)\":{\"notice\":\"disable existing market\"},\"create(address,uint256[3],bool[2],uint256[2],uint32[2])\":{\"notice\":\"creates a new market type\"},\"currentControlVariable(uint256)\":{\"notice\":\"up to date control variable\"},\"currentDebt(uint256)\":{\"notice\":\"calculate debt factoring in decay\"},\"debtDecay(uint256)\":{\"notice\":\"amount of debt to decay from total debt for market ID\"},\"debtRatio(uint256)\":{\"notice\":\"calculate current ratio of debt to supply\"},\"deposit(uint256,uint256,uint256,address,address)\":{\"notice\":\"deposit quote tokens in exchange for a bond from a specified market\"},\"indexesFor(address)\":{\"notice\":\"all pending notes for user\"},\"isLive(uint256)\":{\"notice\":\"is a given market accepting deposits\"},\"liveMarkets()\":{\"notice\":\"returns an array of all active market IDs\"},\"liveMarketsFor(address)\":{\"notice\":\"returns an array of all active market IDs for a given quote token\"},\"marketPrice(uint256)\":{\"notice\":\"calculate current market price of quote token in base token\"},\"payoutFor(uint256,uint256)\":{\"notice\":\"payout due for amount of quote tokens\"},\"pendingFor(address,uint256)\":{\"notice\":\"calculate amount available for claim for a single note\"},\"pullNote(address,uint256)\":{\"notice\":\"transfer a note that has been approved by an address\"},\"pushNote(address,uint256)\":{\"notice\":\"approve an address to transfer a note\"},\"redeem(address,uint256[],bool)\":{\"notice\":\"redeem notes for user\"},\"redeemAll(address,bool)\":{\"notice\":\"redeem all redeemable markets for user\"},\"setRewards(uint256,uint256)\":{\"notice\":\"set rewards for front end operators and DAO\"},\"whitelist(address)\":{\"notice\":\"add or remove addresses from the reward whitelist\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/BondDepository.sol\":\"RipProtocolBondDepositoryV2\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"none\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":800},\"remappings\":[]},\"sources\":{\"contracts/BondDepository.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.10;\\n\\nimport \\\"./types/NoteKeeper.sol\\\";\\n\\nimport \\\"./libraries/SafeERC20.sol\\\";\\n\\nimport \\\"./interfaces/IERC20Metadata.sol\\\";\\nimport \\\"./interfaces/IBondDepository.sol\\\";\\n\\n/// @title RipProtocol Bond Depository V2\\n/// @author Zeus, Indigo\\n/// Review by: JeffX\\n\\ncontract RipProtocolBondDepositoryV2 is IBondDepository, NoteKeeper {\\n    /* ======== DEPENDENCIES ======== */\\n\\n    using SafeERC20 for IERC20;\\n\\n    /* ======== EVENTS ======== */\\n\\n    event CreateMarket(uint256 indexed id, address indexed baseToken, address indexed quoteToken, uint256 initialPrice);\\n    event CloseMarket(uint256 indexed id);\\n    event Bond(uint256 indexed id, uint256 amount, uint256 price);\\n    event Tuned(uint256 indexed id, uint64 oldControlVariable, uint64 newControlVariable);\\n\\n    /* ======== STATE VARIABLES ======== */\\n\\n    // Storage\\n    Market[] public markets; // persistent market data\\n    Terms[] public terms; // deposit construction data\\n    Metadata[] public metadata; // extraneous market data\\n    mapping(uint256 => Adjustment) public adjustments; // control variable changes\\n\\n    // Queries\\n    mapping(address => uint256[]) public marketsForQuote; // market IDs for quote token\\n\\n    /* ======== CONSTRUCTOR ======== */\\n\\n    constructor(\\n        IRipProtocolAuthority _authority,\\n        IERC20 _rip,\\n        IgRIP _grip,\\n        IStaking _staking,\\n        ITreasury _treasury\\n    ) NoteKeeper(_authority, _rip, _grip, _staking, _treasury) {\\n        // save gas for users by bulk approving stake() transactions\\n        _rip.approve(address(_staking), 1e45);\\n    }\\n\\n    /* ======== DEPOSIT ======== */\\n\\n    /**\\n     * @notice             deposit quote tokens in exchange for a bond from a specified market\\n     * @param _id          the ID of the market\\n     * @param _amount      the amount of quote token to spend\\n     * @param _maxPrice    the maximum price at which to buy\\n     * @param _user        the recipient of the payout\\n     * @param _referral    the front end operator address\\n     * @return payout_     the amount of gRIP due\\n     * @return expiry_     the timestamp at which payout is redeemable\\n     * @return index_      the user index of the Note (used to redeem or query information)\\n     */\\n    function deposit(\\n        uint256 _id,\\n        uint256 _amount,\\n        uint256 _maxPrice,\\n        address _user,\\n        address _referral\\n    )\\n        external\\n        override\\n        returns (\\n            uint256 payout_,\\n            uint256 expiry_,\\n            uint256 index_\\n        )\\n    {\\n        Market storage market = markets[_id];\\n        Terms memory term = terms[_id];\\n        uint48 currentTime = uint48(block.timestamp);\\n\\n        // Markets end at a defined timestamp\\n        // |-------------------------------------| t\\n        require(currentTime < term.conclusion, \\\"Depository: market concluded\\\");\\n\\n        // Debt and the control variable decay over time\\n        _decay(_id, currentTime);\\n\\n        // Users input a maximum price, which protects them from price changes after\\n        // entering the mempool. max price is a slippage mitigation measure\\n        uint256 price = _marketPrice(_id);\\n        require(price <= _maxPrice, \\\"Depository: more than max price\\\");\\n\\n        /**\\n         * payout for the deposit = amount / price\\n         *\\n         * where\\n         * payout = RIP out\\n         * amount = quote tokens in\\n         * price = quote tokens : rip (i.e. 42069 DAI : RIP)\\n         *\\n         * 1e18 = RIP decimals (9) + price decimals (9)\\n         */\\n        payout_ = ((_amount * 1e18) / price) / (10**metadata[_id].quoteDecimals);\\n\\n        // markets have a max payout amount, capping size because deposits\\n        // do not experience slippage. max payout is recalculated upon tuning\\n        require(payout_ <= market.maxPayout, \\\"Depository: max size exceeded\\\");\\n\\n        /*\\n         * each market is initialized with a capacity\\n         *\\n         * this is either the number of RIP that the market can sell\\n         * (if capacity in quote is false),\\n         *\\n         * or the number of quote tokens that the market can buy\\n         * (if capacity in quote is true)\\n         */\\n        market.capacity -= market.capacityInQuote ? _amount : payout_;\\n\\n        /**\\n         * bonds mature with a cliff at a set timestamp\\n         * prior to the expiry timestamp, no payout tokens are accessible to the user\\n         * after the expiry timestamp, the entire payout can be redeemed\\n         *\\n         * there are two types of bonds: fixed-term and fixed-expiration\\n         *\\n         * fixed-term bonds mature in a set amount of time from deposit\\n         * i.e. term = 1 week. when alice deposits on day 1, her bond\\n         * expires on day 8. when bob deposits on day 2, his bond expires day 9.\\n         *\\n         * fixed-expiration bonds mature at a set timestamp\\n         * i.e. expiration = day 10. when alice deposits on day 1, her term\\n         * is 9 days. when bob deposits on day 2, his term is 8 days.\\n         */\\n        expiry_ = term.fixedTerm ? term.vesting + currentTime : term.vesting;\\n\\n        // markets keep track of how many quote tokens have been\\n        // purchased, and how much RIP has been sold\\n        market.purchased += _amount;\\n        market.sold += uint64(payout_);\\n\\n        // incrementing total debt raises the price of the next bond\\n        market.totalDebt += uint64(payout_);\\n\\n        emit Bond(_id, _amount, price);\\n\\n        /**\\n         * user data is stored as Notes. these are isolated array entries\\n         * storing the amount due, the time created, the time when payout\\n         * is redeemable, the time when payout was redeemed, and the ID\\n         * of the market deposited into\\n         */\\n        index_ = addNote(_user, payout_, uint48(expiry_), uint48(_id), _referral);\\n\\n        // transfer payment to treasury\\n        market.quoteToken.safeTransferFrom(msg.sender, address(treasury), _amount);\\n\\n        // if max debt is breached, the market is closed\\n        // this a circuit breaker\\n        if (term.maxDebt < market.totalDebt) {\\n            market.capacity = 0;\\n            emit CloseMarket(_id);\\n        } else {\\n            // if market will continue, the control variable is tuned to hit targets on time\\n            _tune(_id, currentTime);\\n        }\\n    }\\n\\n    /**\\n     * @notice             decay debt, and adjust control variable if there is an active change\\n     * @param _id          ID of market\\n     * @param _time        uint48 timestamp (saves gas when passed in)\\n     */\\n    function _decay(uint256 _id, uint48 _time) internal {\\n        // Debt decay\\n\\n        /*\\n         * Debt is a time-decayed sum of tokens spent in a market\\n         * Debt is added when deposits occur and removed over time\\n         * |\\n         * |    debt falls with\\n         * |   / \\\\  inactivity       / \\\\\\n         * | /     \\\\              /\\\\/    \\\\\\n         * |         \\\\           /         \\\\\\n         * |           \\\\      /\\\\/            \\\\\\n         * |             \\\\  /  and rises       \\\\\\n         * |                with deposits\\n         * |\\n         * |------------------------------------| t\\n         */\\n        markets[_id].totalDebt -= debtDecay(_id);\\n        metadata[_id].lastDecay = _time;\\n\\n        // Control variable decay\\n\\n        // The bond control variable is continually tuned. When it is lowered (which\\n        // lowers the market price), the change is carried out smoothly over time.\\n        if (adjustments[_id].active) {\\n            Adjustment storage adjustment = adjustments[_id];\\n\\n            (uint64 adjustBy, uint48 secondsSince, bool stillActive) = _controlDecay(_id);\\n            terms[_id].controlVariable -= adjustBy;\\n\\n            if (stillActive) {\\n                adjustment.change -= adjustBy;\\n                adjustment.timeToAdjusted -= secondsSince;\\n                adjustment.lastAdjustment = _time;\\n            } else {\\n                adjustment.active = false;\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @notice             auto-adjust control variable to hit capacity/spend target\\n     * @param _id          ID of market\\n     * @param _time        uint48 timestamp (saves gas when passed in)\\n     */\\n    function _tune(uint256 _id, uint48 _time) internal {\\n        Metadata memory meta = metadata[_id];\\n\\n        if (_time >= meta.lastTune + meta.tuneInterval) {\\n            Market memory market = markets[_id];\\n\\n            // compute seconds remaining until market will conclude\\n            uint256 timeRemaining = terms[_id].conclusion - _time;\\n            uint256 price = _marketPrice(_id);\\n\\n            // standardize capacity into an base token amount\\n            // rip decimals (9) + price decimals (9)\\n            uint256 capacity = market.capacityInQuote\\n                ? ((market.capacity * 1e18) / price) / (10**meta.quoteDecimals)\\n                : market.capacity;\\n\\n            /**\\n             * calculate the correct payout to complete on time assuming each bond\\n             * will be max size in the desired deposit interval for the remaining time\\n             *\\n             * i.e. market has 10 days remaining. deposit interval is 1 day. capacity\\n             * is 10,000 RIP. max payout would be 1,000 RIP (10,000 * 1 / 10).\\n             */\\n            markets[_id].maxPayout = uint64((capacity * meta.depositInterval) / timeRemaining);\\n\\n            // calculate the ideal total debt to satisfy capacity in the remaining time\\n            uint256 targetDebt = (capacity * meta.length) / timeRemaining;\\n\\n            // derive a new control variable from the target debt and current supply\\n            uint64 newControlVariable = uint64((price * treasury.baseSupply()) / targetDebt);\\n\\n            emit Tuned(_id, terms[_id].controlVariable, newControlVariable);\\n\\n            if (newControlVariable >= terms[_id].controlVariable) {\\n                terms[_id].controlVariable = newControlVariable;\\n            } else {\\n                // if decrease, control variable change will be carried out over the tune interval\\n                // this is because price will be lowered\\n                uint64 change = terms[_id].controlVariable - newControlVariable;\\n                adjustments[_id] = Adjustment(change, _time, meta.tuneInterval, true);\\n            }\\n            metadata[_id].lastTune = _time;\\n        }\\n    }\\n\\n    /* ======== CREATE ======== */\\n\\n    /**\\n     * @notice             creates a new market type\\n     * @dev                current price should be in 9 decimals.\\n     * @param _quoteToken  token used to deposit\\n     * @param _market      [capacity (in RIP or quote), initial price / RIP (9 decimals), debt buffer (3 decimals)]\\n     * @param _booleans    [capacity in quote, fixed term]\\n     * @param _terms       [vesting length (if fixed term) or vested timestamp, conclusion timestamp]\\n     * @param _intervals   [deposit interval (seconds), tune interval (seconds)]\\n     * @return id_         ID of new bond market\\n     */\\n    function create(\\n        IERC20 _quoteToken,\\n        uint256[3] memory _market,\\n        bool[2] memory _booleans,\\n        uint256[2] memory _terms,\\n        uint32[2] memory _intervals\\n    ) external override onlyPolicy returns (uint256 id_) {\\n        // the length of the program, in seconds\\n        uint256 secondsToConclusion = _terms[1] - block.timestamp;\\n\\n        // the decimal count of the quote token\\n        uint256 decimals = IERC20Metadata(address(_quoteToken)).decimals();\\n\\n        /*\\n         * initial target debt is equal to capacity (this is the amount of debt\\n         * that will decay over in the length of the program if price remains the same).\\n         * it is converted into base token terms if passed in in quote token terms.\\n         *\\n         * 1e18 = rip decimals (9) + initial price decimals (9)\\n         */\\n        uint64 targetDebt = uint64(_booleans[0] ? ((_market[0] * 1e18) / _market[1]) / 10**decimals : _market[0]);\\n\\n        /*\\n         * max payout is the amount of capacity that should be utilized in a deposit\\n         * interval. for example, if capacity is 1,000 RIP, there are 10 days to conclusion,\\n         * and the preferred deposit interval is 1 day, max payout would be 100 RIP.\\n         */\\n        uint64 maxPayout = uint64((targetDebt * _intervals[0]) / secondsToConclusion);\\n\\n        /*\\n         * max debt serves as a circuit breaker for the market. let's say the quote\\n         * token is a stablecoin, and that stablecoin depegs. without max debt, the\\n         * market would continue to buy until it runs out of capacity. this is\\n         * configurable with a 3 decimal buffer (1000 = 1% above initial price).\\n         * note that its likely advisable to keep this buffer wide.\\n         * note that the buffer is above 100%. i.e. 10% buffer = initial debt * 1.1\\n         */\\n        uint256 maxDebt = targetDebt + ((targetDebt * _market[2]) / 1e5); // 1e5 = 100,000. 10,000 / 100,000 = 10%.\\n\\n        /*\\n         * the control variable is set so that initial price equals the desired\\n         * initial price. the control variable is the ultimate determinant of price,\\n         * so we compute this last.\\n         *\\n         * price = control variable * debt ratio\\n         * debt ratio = total debt / supply\\n         * therefore, control variable = price / debt ratio\\n         */\\n        uint256 controlVariable = (_market[1] * treasury.baseSupply()) / targetDebt;\\n\\n        // depositing into, or getting info for, the created market uses this ID\\n        id_ = markets.length;\\n\\n        markets.push(\\n            Market({\\n                quoteToken: _quoteToken,\\n                capacityInQuote: _booleans[0],\\n                capacity: _market[0],\\n                totalDebt: targetDebt,\\n                maxPayout: maxPayout,\\n                purchased: 0,\\n                sold: 0\\n            })\\n        );\\n\\n        terms.push(\\n            Terms({\\n                fixedTerm: _booleans[1],\\n                controlVariable: uint64(controlVariable),\\n                vesting: uint48(_terms[0]),\\n                conclusion: uint48(_terms[1]),\\n                maxDebt: uint64(maxDebt)\\n            })\\n        );\\n\\n        metadata.push(\\n            Metadata({\\n                lastTune: uint48(block.timestamp),\\n                lastDecay: uint48(block.timestamp),\\n                length: uint48(secondsToConclusion),\\n                depositInterval: _intervals[0],\\n                tuneInterval: _intervals[1],\\n                quoteDecimals: uint8(decimals)\\n            })\\n        );\\n\\n        marketsForQuote[address(_quoteToken)].push(id_);\\n\\n        emit CreateMarket(id_, address(rip), address(_quoteToken), _market[1]);\\n    }\\n\\n    /**\\n     * @notice             disable existing market\\n     * @param _id          ID of market to close\\n     */\\n    function close(uint256 _id) external override onlyPolicy {\\n        terms[_id].conclusion = uint48(block.timestamp);\\n        markets[_id].capacity = 0;\\n        emit CloseMarket(_id);\\n    }\\n\\n    /* ======== EXTERNAL VIEW ======== */\\n\\n    /**\\n     * @notice             calculate current market price of quote token in base token\\n     * @dev                accounts for debt and control variable decay since last deposit (vs _marketPrice())\\n     * @param _id          ID of market\\n     * @return             price for market in RIP decimals\\n     *\\n     * price is derived from the equation\\n     *\\n     * p = cv * dr\\n     *\\n     * where\\n     * p = price\\n     * cv = control variable\\n     * dr = debt ratio\\n     *\\n     * dr = d / s\\n     *\\n     * where\\n     * d = debt\\n     * s = supply of token at market creation\\n     *\\n     * d -= ( d * (dt / l) )\\n     *\\n     * where\\n     * dt = change in time\\n     * l = length of program\\n     */\\n    function marketPrice(uint256 _id) public view override returns (uint256) {\\n        return (currentControlVariable(_id) * debtRatio(_id)) / (10**metadata[_id].quoteDecimals);\\n    }\\n\\n    /**\\n     * @notice             payout due for amount of quote tokens\\n     * @dev                accounts for debt and control variable decay so it is up to date\\n     * @param _amount      amount of quote tokens to spend\\n     * @param _id          ID of market\\n     * @return             amount of RIP to be paid in RIP decimals\\n     *\\n     * @dev 1e18 = rip decimals (9) + market price decimals (9)\\n     */\\n    function payoutFor(uint256 _amount, uint256 _id) external view override returns (uint256) {\\n        Metadata memory meta = metadata[_id];\\n        return (_amount * 1e18) / marketPrice(_id) / 10**meta.quoteDecimals;\\n    }\\n\\n    /**\\n     * @notice             calculate current ratio of debt to supply\\n     * @dev                uses current debt, which accounts for debt decay since last deposit (vs _debtRatio())\\n     * @param _id          ID of market\\n     * @return             debt ratio for market in quote decimals\\n     */\\n    function debtRatio(uint256 _id) public view override returns (uint256) {\\n        return (currentDebt(_id) * (10**metadata[_id].quoteDecimals)) / treasury.baseSupply();\\n    }\\n\\n    /**\\n     * @notice             calculate debt factoring in decay\\n     * @dev                accounts for debt decay since last deposit\\n     * @param _id          ID of market\\n     * @return             current debt for market in RIP decimals\\n     */\\n    function currentDebt(uint256 _id) public view override returns (uint256) {\\n        return markets[_id].totalDebt - debtDecay(_id);\\n    }\\n\\n    /**\\n     * @notice             amount of debt to decay from total debt for market ID\\n     * @param _id          ID of market\\n     * @return             amount of debt to decay\\n     */\\n    function debtDecay(uint256 _id) public view override returns (uint64) {\\n        Metadata memory meta = metadata[_id];\\n\\n        uint256 secondsSince = block.timestamp - meta.lastDecay;\\n\\n        return uint64((markets[_id].totalDebt * secondsSince) / meta.length);\\n    }\\n\\n    /**\\n     * @notice             up to date control variable\\n     * @dev                accounts for control variable adjustment\\n     * @param _id          ID of market\\n     * @return             control variable for market in RIP decimals\\n     */\\n    function currentControlVariable(uint256 _id) public view returns (uint256) {\\n        (uint64 decay, , ) = _controlDecay(_id);\\n        return terms[_id].controlVariable - decay;\\n    }\\n\\n    /**\\n     * @notice             is a given market accepting deposits\\n     * @param _id          ID of market\\n     */\\n    function isLive(uint256 _id) public view override returns (bool) {\\n        return (markets[_id].capacity != 0 && terms[_id].conclusion > block.timestamp);\\n    }\\n\\n    /**\\n     * @notice returns an array of all active market IDs\\n     */\\n    function liveMarkets() external view override returns (uint256[] memory) {\\n        uint256 num;\\n        for (uint256 i = 0; i < markets.length; i++) {\\n            if (isLive(i)) num++;\\n        }\\n\\n        uint256[] memory ids = new uint256[](num);\\n        uint256 nonce;\\n        for (uint256 i = 0; i < markets.length; i++) {\\n            if (isLive(i)) {\\n                ids[nonce] = i;\\n                nonce++;\\n            }\\n        }\\n        return ids;\\n    }\\n\\n    /**\\n     * @notice             returns an array of all active market IDs for a given quote token\\n     * @param _token       quote token to check for\\n     */\\n    function liveMarketsFor(address _token) external view override returns (uint256[] memory) {\\n        uint256[] memory mkts = marketsForQuote[_token];\\n        uint256 num;\\n\\n        for (uint256 i = 0; i < mkts.length; i++) {\\n            if (isLive(mkts[i])) num++;\\n        }\\n\\n        uint256[] memory ids = new uint256[](num);\\n        uint256 nonce;\\n\\n        for (uint256 i = 0; i < mkts.length; i++) {\\n            if (isLive(mkts[i])) {\\n                ids[nonce] = mkts[i];\\n                nonce++;\\n            }\\n        }\\n        return ids;\\n    }\\n\\n    /* ======== INTERNAL VIEW ======== */\\n\\n    /**\\n     * @notice                  calculate current market price of quote token in base token\\n     * @dev                     see marketPrice() for explanation of price computation\\n     * @dev                     uses info from storage because data has been updated before call (vs marketPrice())\\n     * @param _id               market ID\\n     * @return                  price for market in RIP decimals\\n     */\\n    function _marketPrice(uint256 _id) internal view returns (uint256) {\\n        return (terms[_id].controlVariable * _debtRatio(_id)) / (10**metadata[_id].quoteDecimals);\\n    }\\n\\n    /**\\n     * @notice                  calculate debt factoring in decay\\n     * @dev                     uses info from storage because data has been updated before call (vs debtRatio())\\n     * @param _id               market ID\\n     * @return                  current debt for market in quote decimals\\n     */\\n    function _debtRatio(uint256 _id) internal view returns (uint256) {\\n        return (markets[_id].totalDebt * (10**metadata[_id].quoteDecimals)) / treasury.baseSupply();\\n    }\\n\\n    /**\\n     * @notice                  amount to decay control variable by\\n     * @param _id               ID of market\\n     * @return decay_           change in control variable\\n     * @return secondsSince_    seconds since last change in control variable\\n     * @return active_          whether or not change remains active\\n     */\\n    function _controlDecay(uint256 _id)\\n        internal\\n        view\\n        returns (\\n            uint64 decay_,\\n            uint48 secondsSince_,\\n            bool active_\\n        )\\n    {\\n        Adjustment memory info = adjustments[_id];\\n        if (!info.active) return (0, 0, false);\\n\\n        secondsSince_ = uint48(block.timestamp) - info.lastAdjustment;\\n\\n        active_ = secondsSince_ < info.timeToAdjusted;\\n        decay_ = active_ ? (info.change * secondsSince_) / info.timeToAdjusted : info.change;\\n    }\\n}\\n\",\"keccak256\":\"0x4e35f45d7c9b1901301b8c6bcd9cbde1ebf567c2e499edc0590c16fe03d80e00\",\"license\":\"MIT\"},\"contracts/interfaces/IBondDepository.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0\\npragma solidity >=0.7.5;\\n\\nimport \\\"./IERC20.sol\\\";\\n\\ninterface IBondDepository {\\n    // Info about each type of market\\n    struct Market {\\n        uint256 capacity; // capacity remaining\\n        IERC20 quoteToken; // token to accept as payment\\n        bool capacityInQuote; // capacity limit is in payment token (true) or in RIP (false, default)\\n        uint64 totalDebt; // total debt from market\\n        uint64 maxPayout; // max tokens in/out (determined by capacityInQuote false/true, respectively)\\n        uint64 sold; // base tokens out\\n        uint256 purchased; // quote tokens in\\n    }\\n\\n    // Info for creating new markets\\n    struct Terms {\\n        bool fixedTerm; // fixed term or fixed expiration\\n        uint64 controlVariable; // scaling variable for price\\n        uint48 vesting; // length of time from deposit to maturity if fixed-term\\n        uint48 conclusion; // timestamp when market no longer offered (doubles as time when market matures if fixed-expiry)\\n        uint64 maxDebt; // 9 decimal debt maximum in RIP\\n    }\\n\\n    // Additional info about market.\\n    struct Metadata {\\n        uint48 lastTune; // last timestamp when control variable was tuned\\n        uint48 lastDecay; // last timestamp when market was created and debt was decayed\\n        uint48 length; // time from creation to conclusion. used as speed to decay debt.\\n        uint48 depositInterval; // target frequency of deposits\\n        uint48 tuneInterval; // frequency of tuning\\n        uint8 quoteDecimals; // decimals of quote token\\n    }\\n\\n    // Control variable adjustment data\\n    struct Adjustment {\\n        uint64 change;\\n        uint48 lastAdjustment;\\n        uint48 timeToAdjusted;\\n        bool active;\\n    }\\n\\n    /**\\n     * @notice deposit market\\n     * @param _bid uint256\\n     * @param _amount uint256\\n     * @param _maxPrice uint256\\n     * @param _user address\\n     * @param _referral address\\n     * @return payout_ uint256\\n     * @return expiry_ uint256\\n     * @return index_ uint256\\n     */\\n    function deposit(\\n        uint256 _bid,\\n        uint256 _amount,\\n        uint256 _maxPrice,\\n        address _user,\\n        address _referral\\n    )\\n        external\\n        returns (\\n            uint256 payout_,\\n            uint256 expiry_,\\n            uint256 index_\\n        );\\n\\n    function create(\\n        IERC20 _quoteToken, // token used to deposit\\n        uint256[3] memory _market, // [capacity, initial price]\\n        bool[2] memory _booleans, // [capacity in quote, fixed term]\\n        uint256[2] memory _terms, // [vesting, conclusion]\\n        uint32[2] memory _intervals // [deposit interval, tune interval]\\n    ) external returns (uint256 id_);\\n\\n    function close(uint256 _id) external;\\n\\n    function isLive(uint256 _bid) external view returns (bool);\\n\\n    function liveMarkets() external view returns (uint256[] memory);\\n\\n    function liveMarketsFor(address _quoteToken) external view returns (uint256[] memory);\\n\\n    function payoutFor(uint256 _amount, uint256 _bid) external view returns (uint256);\\n\\n    function marketPrice(uint256 _bid) external view returns (uint256);\\n\\n    function currentDebt(uint256 _bid) external view returns (uint256);\\n\\n    function debtRatio(uint256 _bid) external view returns (uint256);\\n\\n    function debtDecay(uint256 _bid) external view returns (uint64);\\n}\\n\",\"keccak256\":\"0xf2179b42f3523e523da6899bd9883a51492c7a5a856e2e54e28ff71c1d44c9a2\",\"license\":\"AGPL-3.0\"},\"contracts/interfaces/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0\\npragma solidity >=0.7.5;\\n\\ninterface IERC20 {\\n    function totalSupply() external view returns (uint256);\\n\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0xc379ec1f3a741cc00948003e24687516b8fdb71914cd3b90b10589d74fe1d49f\",\"license\":\"AGPL-3.0\"},\"contracts/interfaces/IERC20Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0\\npragma solidity >=0.7.5;\\n\\nimport \\\"./IERC20.sol\\\";\\n\\ninterface IERC20Metadata is IERC20 {\\n    function name() external view returns (string memory);\\n\\n    function symbol() external view returns (string memory);\\n\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0x9690aab5d4ff226e2618763ca0eb46853234aba1582ba0392c2cdcb2b3c7274c\",\"license\":\"AGPL-3.0\"},\"contracts/interfaces/INoteKeeper.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0-only\\npragma solidity >=0.7.5;\\n\\ninterface INoteKeeper {\\n    // Info for market note\\n    struct Note {\\n        uint256 payout; // gRIP remaining to be paid\\n        uint48 created; // time market was created\\n        uint48 matured; // timestamp when market is matured\\n        uint48 redeemed; // time market was redeemed\\n        uint48 marketID; // market ID of deposit. uint48 to avoid adding a slot.\\n    }\\n\\n    function redeem(\\n        address _user,\\n        uint256[] memory _indexes,\\n        bool _sendgRIP\\n    ) external returns (uint256);\\n\\n    function redeemAll(address _user, bool _sendgRIP) external returns (uint256);\\n\\n    function pushNote(address to, uint256 index) external;\\n\\n    function pullNote(address from, uint256 index) external returns (uint256 newIndex_);\\n\\n    function indexesFor(address _user) external view returns (uint256[] memory);\\n\\n    function pendingFor(address _user, uint256 _index) external view returns (uint256 payout_, bool matured_);\\n}\\n\",\"keccak256\":\"0x6a7f924d127f6b1202e7e03db6bf5cd44a0f5c92708efa3b3fb8c9b08fc4cdbb\",\"license\":\"AGPL-3.0-only\"},\"contracts/interfaces/IRipProtocolAuthority.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0\\npragma solidity >=0.7.5;\\n\\ninterface IRipProtocolAuthority {\\n    /* ========== EVENTS ========== */\\n\\n    event GovernorPushed(address indexed from, address indexed to, bool _effectiveImmediately);\\n    event GuardianPushed(address indexed from, address indexed to, bool _effectiveImmediately);\\n    event PolicyPushed(address indexed from, address indexed to, bool _effectiveImmediately);\\n    event VaultPushed(address indexed from, address indexed to, bool _effectiveImmediately);\\n\\n    event GovernorPulled(address indexed from, address indexed to);\\n    event GuardianPulled(address indexed from, address indexed to);\\n    event PolicyPulled(address indexed from, address indexed to);\\n    event VaultPulled(address indexed from, address indexed to);\\n\\n    /* ========== VIEW ========== */\\n\\n    function governor() external view returns (address);\\n\\n    function guardian() external view returns (address);\\n\\n    function policy() external view returns (address);\\n\\n    function vault() external view returns (address);\\n}\\n\",\"keccak256\":\"0x5ce67ce506e00cb185b59c48ed294219903c85c97b11ca7d24cef9fb223ee793\",\"license\":\"AGPL-3.0\"},\"contracts/interfaces/IStaking.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0\\npragma solidity >=0.7.5;\\n\\ninterface IStaking {\\n    function stake(\\n        address _to,\\n        uint256 _amount,\\n        bool _rebasing,\\n        bool _claim\\n    ) external returns (uint256);\\n\\n    function claim(address _recipient, bool _rebasing) external returns (uint256);\\n\\n    function forfeit() external returns (uint256);\\n\\n    function toggleLock() external;\\n\\n    function unstake(\\n        address _to,\\n        uint256 _amount,\\n        bool _trigger,\\n        bool _rebasing\\n    ) external returns (uint256);\\n\\n    function wrap(address _to, uint256 _amount) external returns (uint256 gBalance_);\\n\\n    function unwrap(address _to, uint256 _amount) external returns (uint256 sBalance_);\\n\\n    function rebase() external;\\n\\n    function index() external view returns (uint256);\\n\\n    function contractBalance() external view returns (uint256);\\n\\n    function totalStaked() external view returns (uint256);\\n\\n    function supplyInWarmup() external view returns (uint256);\\n}\\n\",\"keccak256\":\"0xc5481248b924479a867d252882a1be9573e4aefe3c7816045e1c0c25daacca70\",\"license\":\"AGPL-3.0\"},\"contracts/interfaces/ITreasury.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0\\npragma solidity >=0.7.5;\\n\\ninterface ITreasury {\\n    function deposit(\\n        uint256 _amount,\\n        address _token,\\n        uint256 _profit\\n    ) external returns (uint256);\\n\\n    function withdraw(uint256 _amount, address _token) external;\\n\\n    function tokenValue(address _token, uint256 _amount) external view returns (uint256 value_);\\n\\n    function mint(address _recipient, uint256 _amount) external;\\n\\n    function manage(address _token, uint256 _amount) external;\\n\\n    function incurDebt(uint256 amount_, address token_) external;\\n\\n    function repayDebtWithReserve(uint256 amount_, address token_) external;\\n\\n    function excessReserves() external view returns (uint256);\\n\\n    function baseSupply() external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x3a7e171916da6bf9b28904c2adc6ede32896a841e7f7ede0ad60da6804659c56\",\"license\":\"AGPL-3.0\"},\"contracts/interfaces/IgRIP.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0\\npragma solidity >=0.7.5;\\n\\nimport \\\"./IERC20.sol\\\";\\n\\ninterface IgRIP is IERC20 {\\n    function mint(address _to, uint256 _amount) external;\\n\\n    function burn(address _from, uint256 _amount) external;\\n\\n    function index() external view returns (uint256);\\n\\n    function balanceFrom(uint256 _amount) external view returns (uint256);\\n\\n    function balanceTo(uint256 _amount) external view returns (uint256);\\n\\n    function migrate(address _staking, address _sRIP) external;\\n}\\n\",\"keccak256\":\"0x7f5847f63c0597fd073cbbf374191fcfba6cb594801dbe2d192ebcda78acb92b\",\"license\":\"AGPL-3.0\"},\"contracts/libraries/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0-only\\npragma solidity >=0.7.5;\\n\\nimport {IERC20} from \\\"../interfaces/IERC20.sol\\\";\\n\\n/// @notice Safe IERC20 and ETH transfer library that safely handles missing return values.\\n/// @author Modified from Pancake (https://github.com/Pancake/pancake-v3-periphery/blob/main/contracts/libraries/TransferHelper.sol)\\n/// Taken from Solmate\\nlibrary SafeERC20 {\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal {\\n        (bool success, bytes memory data) = address(token).call(\\n            abi.encodeWithSelector(IERC20.transferFrom.selector, from, to, amount)\\n        );\\n\\n        require(success && (data.length == 0 || abi.decode(data, (bool))), \\\"TRANSFER_FROM_FAILED\\\");\\n    }\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 amount\\n    ) internal {\\n        (bool success, bytes memory data) = address(token).call(\\n            abi.encodeWithSelector(IERC20.transfer.selector, to, amount)\\n        );\\n\\n        require(success && (data.length == 0 || abi.decode(data, (bool))), \\\"TRANSFER_FAILED\\\");\\n    }\\n\\n    function safeApprove(\\n        IERC20 token,\\n        address to,\\n        uint256 amount\\n    ) internal {\\n        (bool success, bytes memory data) = address(token).call(\\n            abi.encodeWithSelector(IERC20.approve.selector, to, amount)\\n        );\\n\\n        require(success && (data.length == 0 || abi.decode(data, (bool))), \\\"APPROVE_FAILED\\\");\\n    }\\n\\n    function safeTransferETH(address to, uint256 amount) internal {\\n        (bool success, ) = to.call{value: amount}(new bytes(0));\\n\\n        require(success, \\\"ETH_TRANSFER_FAILED\\\");\\n    }\\n}\\n\",\"keccak256\":\"0x0dfa733680166bfe94b8163e5fd9040b6b86d3f9f7ee1c83a0990a9e6b85f607\",\"license\":\"AGPL-3.0-only\"},\"contracts/types/FrontEndRewarder.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0-only\\npragma solidity ^0.8.10;\\n\\nimport \\\"../types/RipProtocolAccessControlled.sol\\\";\\nimport \\\"../interfaces/IERC20.sol\\\";\\n\\nabstract contract FrontEndRewarder is RipProtocolAccessControlled {\\n    /* ========= STATE VARIABLES ========== */\\n\\n    uint256 public daoReward; // % reward for dao (3 decimals: 100 = 1%)\\n    uint256 public refReward; // % reward for referrer (3 decimals: 100 = 1%)\\n    mapping(address => uint256) public rewards; // front end operator rewards\\n    mapping(address => bool) public whitelisted; // whitelisted status for operators\\n\\n    IERC20 internal immutable rip; // reward token\\n\\n    constructor(IRipProtocolAuthority _authority, IERC20 _rip) RipProtocolAccessControlled(_authority) {\\n        rip = _rip;\\n    }\\n\\n    /* ========= EXTERNAL FUNCTIONS ========== */\\n\\n    // pay reward to front end operator\\n    function getReward() external {\\n        uint256 reward = rewards[msg.sender];\\n\\n        rewards[msg.sender] = 0;\\n        rip.transfer(msg.sender, reward);\\n    }\\n\\n    /* ========= INTERNAL ========== */\\n\\n    /**\\n     * @notice add new market payout to user data\\n     */\\n    function _giveRewards(uint256 _payout, address _referral) internal returns (uint256) {\\n        // first we calculate rewards paid to the DAO and to the front end operator (referrer)\\n        uint256 toDAO = (_payout * daoReward) / 1e4;\\n        uint256 toRef = (_payout * refReward) / 1e4;\\n\\n        // and store them in our rewards mapping\\n        if (whitelisted[_referral]) {\\n            rewards[_referral] += toRef;\\n            rewards[authority.guardian()] += toDAO;\\n        } else {\\n            // the DAO receives both rewards if referrer is not whitelisted\\n            rewards[authority.guardian()] += toDAO + toRef;\\n        }\\n        return toDAO + toRef;\\n    }\\n\\n    /**\\n     * @notice set rewards for front end operators and DAO\\n     */\\n    function setRewards(uint256 _toFrontEnd, uint256 _toDAO) external onlyGovernor {\\n        refReward = _toFrontEnd;\\n        daoReward = _toDAO;\\n    }\\n\\n    /**\\n     * @notice add or remove addresses from the reward whitelist\\n     */\\n    function whitelist(address _operator) external onlyPolicy {\\n        whitelisted[_operator] = !whitelisted[_operator];\\n    }\\n}\\n\",\"keccak256\":\"0xcab93c784e5b1143aee2fa3cacf60f6b080b8e5429cdeabca9f581005bc46a31\",\"license\":\"AGPL-3.0-only\"},\"contracts/types/NoteKeeper.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0-only\\npragma solidity ^0.8.10;\\n\\nimport \\\"../types/FrontEndRewarder.sol\\\";\\n\\nimport \\\"../interfaces/IgRIP.sol\\\";\\nimport \\\"../interfaces/IStaking.sol\\\";\\nimport \\\"../interfaces/ITreasury.sol\\\";\\nimport \\\"../interfaces/INoteKeeper.sol\\\";\\n\\nabstract contract NoteKeeper is INoteKeeper, FrontEndRewarder {\\n    mapping(address => Note[]) public notes; // user deposit data\\n    mapping(address => mapping(uint256 => address)) private noteTransfers; // change note ownership\\n\\n    IgRIP internal immutable gRIP;\\n    IStaking internal immutable staking;\\n    ITreasury internal treasury;\\n\\n    constructor(\\n        IRipProtocolAuthority _authority,\\n        IERC20 _rip,\\n        IgRIP _grip,\\n        IStaking _staking,\\n        ITreasury _treasury\\n    ) FrontEndRewarder(_authority, _rip) {\\n        gRIP = _grip;\\n        staking = _staking;\\n        treasury = _treasury;\\n    }\\n\\n    // if treasury address changes on authority, update it\\n    function updateTreasury() external {\\n        require(\\n            msg.sender == authority.governor() ||\\n                msg.sender == authority.guardian() ||\\n                msg.sender == authority.policy(),\\n            \\\"Only authorized\\\"\\n        );\\n        treasury = ITreasury(authority.vault());\\n    }\\n\\n    /* ========== ADD ========== */\\n\\n    /**\\n     * @notice             adds a new Note for a user, stores the front end & DAO rewards, and mints & stakes payout & rewards\\n     * @param _user        the user that owns the Note\\n     * @param _payout      the amount of RIP due to the user\\n     * @param _expiry      the timestamp when the Note is redeemable\\n     * @param _marketID    the ID of the market deposited into\\n     * @return index_      the index of the Note in the user's array\\n     */\\n    function addNote(\\n        address _user,\\n        uint256 _payout,\\n        uint48 _expiry,\\n        uint48 _marketID,\\n        address _referral\\n    ) internal returns (uint256 index_) {\\n        // the index of the note is the next in the user's array\\n        index_ = notes[_user].length;\\n\\n        // the new note is pushed to the user's array\\n        notes[_user].push(\\n            Note({\\n                payout: gRIP.balanceTo(_payout),\\n                created: uint48(block.timestamp),\\n                matured: _expiry,\\n                redeemed: 0,\\n                marketID: _marketID\\n            })\\n        );\\n\\n        // front end operators can earn rewards by referring users\\n        uint256 rewards = _giveRewards(_payout, _referral);\\n\\n        // mint and stake payout\\n        treasury.mint(address(this), _payout + rewards);\\n\\n        // note that only the payout gets staked (front end rewards are in RIP)\\n        staking.stake(address(this), _payout, false, true);\\n    }\\n\\n    /* ========== REDEEM ========== */\\n\\n    /**\\n     * @notice             redeem notes for user\\n     * @param _user        the user to redeem for\\n     * @param _indexes     the note indexes to redeem\\n     * @param _sendgRIP    send payout as gRIP or sRIP\\n     * @return payout_     sum of payout sent, in gRIP\\n     */\\n    function redeem(\\n        address _user,\\n        uint256[] memory _indexes,\\n        bool _sendgRIP\\n    ) public override returns (uint256 payout_) {\\n        uint48 time = uint48(block.timestamp);\\n\\n        for (uint256 i = 0; i < _indexes.length; i++) {\\n            (uint256 pay, bool matured) = pendingFor(_user, _indexes[i]);\\n\\n            if (matured) {\\n                notes[_user][_indexes[i]].redeemed = time; // mark as redeemed\\n                payout_ += pay;\\n            }\\n        }\\n\\n        if (_sendgRIP) {\\n            gRIP.transfer(_user, payout_); // send payout as gRIP\\n        } else {\\n            staking.unwrap(_user, payout_); // unwrap and send payout as sRIP\\n        }\\n    }\\n\\n    /**\\n     * @notice             redeem all redeemable markets for user\\n     * @dev                if possible, query indexesFor() off-chain and input in redeem() to save gas\\n     * @param _user        user to redeem all notes for\\n     * @param _sendgRIP    send payout as gRIP or sRIP\\n     * @return             sum of payout sent, in gRIP\\n     */\\n    function redeemAll(address _user, bool _sendgRIP) external override returns (uint256) {\\n        return redeem(_user, indexesFor(_user), _sendgRIP);\\n    }\\n\\n    /* ========== TRANSFER ========== */\\n\\n    /**\\n     * @notice             approve an address to transfer a note\\n     * @param _to          address to approve note transfer for\\n     * @param _index       index of note to approve transfer for\\n     */\\n    function pushNote(address _to, uint256 _index) external override {\\n        require(notes[msg.sender][_index].created != 0, \\\"Depository: note not found\\\");\\n        noteTransfers[msg.sender][_index] = _to;\\n    }\\n\\n    /**\\n     * @notice             transfer a note that has been approved by an address\\n     * @param _from        the address that approved the note transfer\\n     * @param _index       the index of the note to transfer (in the sender's array)\\n     */\\n    function pullNote(address _from, uint256 _index) external override returns (uint256 newIndex_) {\\n        require(noteTransfers[_from][_index] == msg.sender, \\\"Depository: transfer not found\\\");\\n        require(notes[_from][_index].redeemed == 0, \\\"Depository: note redeemed\\\");\\n\\n        newIndex_ = notes[msg.sender].length;\\n        notes[msg.sender].push(notes[_from][_index]);\\n\\n        delete notes[_from][_index];\\n    }\\n\\n    /* ========== VIEW ========== */\\n\\n    // Note info\\n\\n    /**\\n     * @notice             all pending notes for user\\n     * @param _user        the user to query notes for\\n     * @return             the pending notes for the user\\n     */\\n    function indexesFor(address _user) public view override returns (uint256[] memory) {\\n        Note[] memory info = notes[_user];\\n\\n        uint256 length;\\n        for (uint256 i = 0; i < info.length; i++) {\\n            if (info[i].redeemed == 0 && info[i].payout != 0) length++;\\n        }\\n\\n        uint256[] memory indexes = new uint256[](length);\\n        uint256 position;\\n\\n        for (uint256 i = 0; i < info.length; i++) {\\n            if (info[i].redeemed == 0 && info[i].payout != 0) {\\n                indexes[position] = i;\\n                position++;\\n            }\\n        }\\n\\n        return indexes;\\n    }\\n\\n    /**\\n     * @notice             calculate amount available for claim for a single note\\n     * @param _user        the user that the note belongs to\\n     * @param _index       the index of the note in the user's array\\n     * @return payout_     the payout due, in gRIP\\n     * @return matured_    if the payout can be redeemed\\n     */\\n    function pendingFor(address _user, uint256 _index) public view override returns (uint256 payout_, bool matured_) {\\n        Note memory note = notes[_user][_index];\\n\\n        payout_ = note.payout;\\n        matured_ = note.redeemed == 0 && note.matured <= block.timestamp && note.payout != 0;\\n    }\\n}\\n\",\"keccak256\":\"0x220a8f923de7f5005bb0bd742ce995e64c0153d253f19bcd9a81a1f01857c0cc\",\"license\":\"AGPL-3.0-only\"},\"contracts/types/RipProtocolAccessControlled.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0-only\\npragma solidity >=0.7.5;\\n\\nimport \\\"../interfaces/IRipProtocolAuthority.sol\\\";\\n\\nabstract contract RipProtocolAccessControlled {\\n    /* ========== EVENTS ========== */\\n\\n    event AuthorityUpdated(IRipProtocolAuthority indexed authority);\\n\\n    string UNAUTHORIZED = \\\"UNAUTHORIZED\\\"; // save gas\\n\\n    /* ========== STATE VARIABLES ========== */\\n\\n    IRipProtocolAuthority public authority;\\n\\n    /* ========== Constructor ========== */\\n\\n    constructor(IRipProtocolAuthority _authority) {\\n        authority = _authority;\\n        emit AuthorityUpdated(_authority);\\n    }\\n\\n    /* ========== MODIFIERS ========== */\\n\\n    modifier onlyGovernor() {\\n        require(msg.sender == authority.governor(), UNAUTHORIZED);\\n        _;\\n    }\\n\\n    modifier onlyGuardian() {\\n        require(msg.sender == authority.guardian(), UNAUTHORIZED);\\n        _;\\n    }\\n\\n    modifier onlyPolicy() {\\n        require(msg.sender == authority.policy(), UNAUTHORIZED);\\n        _;\\n    }\\n\\n    modifier onlyVault() {\\n        require(msg.sender == authority.vault(), UNAUTHORIZED);\\n        _;\\n    }\\n\\n    /* ========== GOV ONLY ========== */\\n\\n    function setAuthority(IRipProtocolAuthority _newAuthority) external onlyGovernor {\\n        authority = _newAuthority;\\n        emit AuthorityUpdated(_newAuthority);\\n    }\\n}\\n\",\"keccak256\":\"0xc44ca4dfaed2a5c0730aa8ed70d953d20b3054941c44197534a3a0907404876a\",\"license\":\"AGPL-3.0-only\"}},\"version\":1}",
  "bytecode": "0x610120604052600c60e08190526b15539055551213d49256915160a21b6101009081526200003191600091906200017b565b503480156200003f57600080fd5b50604051620045f6380380620045f683398101604081905262000062916200023a565b600180546001600160a01b0319166001600160a01b038716908117909155604051869186918691869186918691869183917f2f658b440c35314f52658ea8a740e05b284cdc84dc9ae01e891f21b8933e7cad90600090a2506001600160a01b0390811660805293841660a0525090821660c052600880546001600160a01b03191691831691909117905560405163095ea7b360e01b81528582166004820152722cd76fe086b93ce2f768a00b22a000000000006024820152908716925063095ea7b391506044016020604051808303816000875af115801562000149573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906200016f9190620002ba565b50505050505062000322565b8280546200018990620002e5565b90600052602060002090601f016020900481019282620001ad5760008555620001f8565b82601f10620001c857805160ff1916838001178555620001f8565b82800160010185558215620001f8579182015b82811115620001f8578251825591602001919060010190620001db565b50620002069291506200020a565b5090565b5b808211156200020657600081556001016200020b565b6001600160a01b03811681146200023757600080fd5b50565b600080600080600060a086880312156200025357600080fd5b8551620002608162000221565b6020870151909550620002738162000221565b6040870151909450620002868162000221565b6060870151909350620002998162000221565b6080870151909250620002ac8162000221565b809150509295509295909350565b600060208284031215620002cd57600080fd5b81518015158114620002de57600080fd5b9392505050565b600181811c90821680620002fa57607f821691505b602082108114156200031c57634e487b7160e01b600052602260045260246000fd5b50919050565b60805160a05160c05161428f62000367600039600081816125380152612ff901526000818161249f0152612dfb015260008181610f5801526110e0015261428f6000f3fe608060405234801561001057600080fd5b50600436106102265760003560e01c8063abbf4b171161012a578063c9b67af5116100bd578063e0b117ff1161008c578063e481b26511610071578063e481b26514610680578063f1b7dc7814610693578063f3191a46146106a657600080fd5b8063e0b117ff146105e1578063e3684e391461062957600080fd5b8063c9b67af514610590578063d62fbdd314610598578063d6db4df8146105ab578063d936547e146105be57600080fd5b8063bf7e214f116100f9578063bf7e214f146104db578063c0680e2014610506578063c0aa0e8a14610519578063c3e0fb1c1461056857600080fd5b8063abbf4b17146103a8578063b1283e77146103d3578063bc3b2b1214610433578063bcb29667146104c857600080fd5b806346aed74e116101bd5780637a9e5e4b1161018c5780639b19251a116101715780639b19251a1461037a5780639c7697871461038d578063a42206101461039557600080fd5b80637a9e5e4b146103395780637c770aae1461034c57600080fd5b806346aed74e146102e057806364914439146102f3578063654e51e7146103135780636a6c575d1461032657600080fd5b806321a7d29b116101f957806321a7d29b1461028f57806327507458146102a25780633adec5a7146102c55780633d18b912146102d857600080fd5b80630700037d1461022b5780630a9d85eb1461025e5780630aebeb4e146102715780631885f58014610286575b600080fd5b61024b610239366004613a1a565b60046020526000908152604090205481565b6040519081526020015b60405180910390f35b61024b61026c366004613a37565b6106af565b61028461027f366004613a37565b610707565b005b61024b60025481565b61024b61029d366004613bd7565b610852565b6102b56102b0366004613a37565b610fe0565b6040519015158152602001610255565b61024b6102d3366004613a37565b611049565b6102846110a5565b61024b6102ee366004613c98565b611151565b610306610301366004613a1a565b61116d565b6040516102559190613cd1565b610284610321366004613d15565b6112fb565b61024b610334366004613d15565b6113b2565b610284610347366004613a1a565b611482565b61035f61035a366004613d37565b611585565b60408051938452602084019290925290820152606001610255565b610284610388366004613a1a565b61199c565b610284611a71565b61024b6103a3366004613d8d565b611d12565b6103bb6103b6366004613a37565b611fa5565b6040516001600160401b039091168152602001610255565b6103e66103e1366004613a37565b612089565b604080519788526001600160a01b039096166020880152931515948601949094526001600160401b0391821660608601528116608085015290911660a083015260c082015260e001610255565b610490610441366004613a37565b600c602052600090815260409020546001600160401b0381169065ffffffffffff600160401b82048116916e01000000000000000000000000000081049091169060ff600160a01b9091041684565b604080516001600160401b0395909516855265ffffffffffff9384166020860152919092169083015215156060820152608001610255565b61024b6104d6366004613a37565b6120f7565b6001546104ee906001600160a01b031681565b6040516001600160a01b039091168152602001610255565b61024b610514366004613d8d565b612153565b61052c610527366004613a37565b612184565b6040805195151586526001600160401b03948516602087015265ffffffffffff938416908601529116606084015216608082015260a001610255565b61057b610576366004613d8d565b6121e3565b60408051928352901515602083015201610255565b6103066122ae565b61024b6105a6366004613db9565b612396565b6102846105b9366004613d8d565b6125af565b6102b56105cc366004613a1a565b60056020526000908152604090205460ff1681565b6105f46105ef366004613d8d565b61267e565b6040805195865265ffffffffffff9485166020870152928416928501929092528216606084015216608082015260a001610255565b61063c610637366004613a37565b6126e1565b6040805165ffffffffffff97881681529587166020870152938616938501939093529084166060840152909216608082015260ff90911660a082015260c001610255565b61030661068e366004613a1a565b61273f565b61024b6106a1366004613a37565b612963565b61024b60035481565b6000806106bb83612a0e565b5050905080600a84815481106106d3576106d3613e83565b6000918252602090912001546106f7919061010090046001600160401b0316613eaf565b6001600160401b03169392505050565b600160009054906101000a90046001600160a01b03166001600160a01b0316630505c8c96040518163ffffffff1660e01b8152600401602060405180830381865afa15801561075a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061077e9190613ed7565b6001600160a01b0316336001600160a01b0316146000906107bb5760405162461bcd60e51b81526004016107b29190613ef4565b60405180910390fd5b5042600a82815481106107d0576107d0613e83565b90600052602060002001600001600f6101000a81548165ffffffffffff021916908365ffffffffffff16021790555060006009828154811061081457610814613e83565b6000918252602082206004909102019190915560405182917f8401d05adbea6548a6999cc1540766e6d2ff919292142862893d0e62ec79fbe591a250565b60015460408051630505c8c960e01b815290516000926001600160a01b031691630505c8c99160048083019260209291908290030181865afa15801561089c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108c09190613ed7565b6001600160a01b0316336001600160a01b0316146000906108f45760405162461bcd60e51b81526004016107b29190613ef4565b506020830151600090610908904290613f9c565b90506000876001600160a01b031663313ce5676040518163ffffffff1660e01b8152600401602060405180830381865afa15801561094a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061096e9190613fb3565b60ff1690506000868160200201516109875787516109bf565b61099282600a6140ba565b602089015189516109ab90670de0b6b3a76400006140c6565b6109b591906140fb565b6109bf91906140fb565b855190915060009084906109d99063ffffffff168461410f565b6001600160401b03166109ec91906140fb565b90506000620186a08a60026020020151610a0f906001600160401b0386166140c6565b610a1991906140fb565b610a2c906001600160401b03851661413e565b90506000836001600160401b0316600860009054906101000a90046001600160a01b03166001600160a01b031663860f50486040518163ffffffff1660e01b8152600401602060405180830381865afa158015610a8d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ab19190614156565b60208d0151610ac091906140c6565b610aca91906140fb565b600980546040805160e0810190915290995091925090808d6000602002015181526020018e6001600160a01b031681526020018c600060028110610b1057610b10613e83565b60209081029190910151151582526001600160401b0380891683830152878116604080850191909152600060608086018290526080958601829052875460018181018a5598835291859020875160049093020191825593860151818801805488850151968901518616600160a81b0267ffffffffffffffff60a81b19971515600160a01b027fffffffffffffffffffffff0000000000000000000000000000000000000000009092166001600160a01b03909416939093171795909516179093559284015160028301805460a0808801518516600160401b026fffffffffffffffffffffffffffffffff19909216939094169290921791909117905560c09093015160039091015580519182019052600a9181908d90602002015115158152602001836001600160401b031681526020018b600060028110610c5457610c54613e83565b602002015165ffffffffffff1681526020018b600160028110610c7957610c79613e83565b6020908102919091015165ffffffffffff90811683526001600160401b038088169383019390935284546001810186556000958652828620855191018054868501516040808901516060808b01516080909b01518a16600160a81b0267ffffffffffffffff60a81b199b8916600160781b027fffffffffffffffffffffff000000000000ffffffffffffffffffffffffffffff938a16690100000000000000000002939093167fffffffffffffffffffffff000000000000000000000000ffffffffffffffffff95909b166101000268ffffffffffffffff00199815159890981668ffffffffffffffffff1990961695909517969096179290921697909717179690961695909517909455825160c081018452428216808252928101929092528a1691810191909152600b9290918201908b906020908102919091015163ffffffff168252018a6001602002015163ffffffff1665ffffffffffff1681526020018760ff168152509080600181540180825580915050600190039060005260206000200160009091909190915060008201518160000160006101000a81548165ffffffffffff021916908365ffffffffffff16021790555060208201518160000160066101000a81548165ffffffffffff021916908365ffffffffffff160217905550604082015181600001600c6101000a81548165ffffffffffff021916908365ffffffffffff16021790555060608201518160000160126101000a81548165ffffffffffff021916908365ffffffffffff16021790555060808201518160000160186101000a81548165ffffffffffff021916908365ffffffffffff16021790555060a082015181600001601e6101000a81548160ff021916908360ff1602179055505050600d60008d6001600160a01b03166001600160a01b031681526020019081526020016000208790806001815401808255809150506001900390600052602060002001600090919091909150558b6001600160a01b03167f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316887f2f6ff727bd580b1d1b8332e28aa93ed4ec9d8b08d6e30d6b4c9f7aa63ca17f638e600160038110610fb557610fb5613e83565b6020020151604051610fc991815260200190565b60405180910390a450505050505095945050505050565b600060098281548110610ff557610ff5613e83565b906000526020600020906004020160000154600014158015611043575042600a838154811061102657611026613e83565b600091825260209091200154600160781b900465ffffffffffff16115b92915050565b6000600b828154811061105e5761105e613e83565b60009182526020909120015461107f90600160f01b900460ff16600a61416f565b61108883612963565b611091846106af565b61109b91906140c6565b61104391906140fb565b33600081815260046020819052604080832080549390555163a9059cbb60e01b81529081019290925260248201819052906001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000169063a9059cbb906044016020604051808303816000875af1158015611129573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061114d919061417e565b5050565b6000611166836111608561273f565b84612396565b9392505050565b6001600160a01b0381166000908152600d602090815260408083208054825181850281018501909352808352606094938301828280156111cc57602002820191906000526020600020905b8154815260200190600101908083116111b8575b50505050509050600080600090505b825181101561122b576112068382815181106111f9576111f9613e83565b6020026020010151610fe0565b1561121957816112158161419b565b9250505b806112238161419b565b9150506111db565b506000816001600160401b0381111561124657611246613a50565b60405190808252806020026020018201604052801561126f578160200160208202803683370190505b5090506000805b84518110156112f0576112948582815181106111f9576111f9613e83565b156112de578481815181106112ab576112ab613e83565b60200260200101518383815181106112c5576112c5613e83565b6020908102919091010152816112da8161419b565b9250505b806112e88161419b565b915050611276565b509095945050505050565b600160009054906101000a90046001600160a01b03166001600160a01b0316630c340a246040518163ffffffff1660e01b8152600401602060405180830381865afa15801561134e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906113729190613ed7565b6001600160a01b0316336001600160a01b0316146000906113a65760405162461bcd60e51b81526004016107b29190613ef4565b50600391909155600255565b600080600b83815481106113c8576113c8613e83565b60009182526020918290206040805160c081018252919092015465ffffffffffff8082168352600160301b8204811694830194909452600160601b8104841692820192909252600160901b820483166060820152600160c01b8204909216608083015260ff600160f01b9091041660a0820181905290915061144b90600a61416f565b61145484611049565b61146686670de0b6b3a76400006140c6565b61147091906140fb565b61147a91906140fb565b949350505050565b600160009054906101000a90046001600160a01b03166001600160a01b0316630c340a246040518163ffffffff1660e01b8152600401602060405180830381865afa1580156114d5573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906114f99190613ed7565b6001600160a01b0316336001600160a01b03161460009061152d5760405162461bcd60e51b81526004016107b29190613ef4565b506001805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b0383169081179091556040517f2f658b440c35314f52658ea8a740e05b284cdc84dc9ae01e891f21b8933e7cad90600090a250565b6000806000806009898154811061159e5761159e613e83565b906000526020600020906004020190506000600a8a815481106115c3576115c3613e83565b60009182526020918290206040805160a081018252919092015460ff8116151582526001600160401b03610100820481169483019490945265ffffffffffff69010000000000000000008204811693830193909352600160781b8104831660608301819052600160a81b9091049093166080820152925042919082161061168c5760405162461bcd60e51b815260206004820152601c60248201527f4465706f7369746f72793a206d61726b657420636f6e636c756465640000000060448201526064016107b2565b6116968b82612b06565b60006116a18c612d44565b9050898111156116f35760405162461bcd60e51b815260206004820152601f60248201527f4465706f7369746f72793a206d6f7265207468616e206d61782070726963650060448201526064016107b2565b600b8c8154811061170657611706613e83565b60009182526020909120015461172790600160f01b900460ff16600a61416f565b8161173a8d670de0b6b3a76400006140c6565b61174491906140fb565b61174e91906140fb565b60028501549097506001600160401b03168711156117ae5760405162461bcd60e51b815260206004820152601d60248201527f4465706f7369746f72793a206d61782073697a6520657863656564656400000060448201526064016107b2565b6001840154600160a01b900460ff166117c757866117c9565b8a5b8460000160008282546117dc9190613f9c565b909155505082516117f1578260400151611801565b81836040015161180191906141b6565b65ffffffffffff1695508a84600301600082825461181f919061413e565b909155505060028401805488919060089061184b908490600160401b90046001600160401b03166141e0565b92506101000a8154816001600160401b0302191690836001600160401b03160217905550868460010160158282829054906101000a90046001600160401b031661189591906141e0565b92506101000a8154816001600160401b0302191690836001600160401b031602179055508b7f7880508a48fd3aee88f7e15917d85e39c3ad059e51ad4aca9bb46e7b4938b9618c836040516118f4929190918252602082015260400190565b60405180910390a26119098988888f8c612dba565b600854600186015491965061192d916001600160a01b03908116913391168e61307b565b600184015460808401516001600160401b03600160a81b9092048216911610156119835760008085556040518d917f8401d05adbea6548a6999cc1540766e6d2ff919292142862893d0e62ec79fbe591a261198d565b61198d8c836131ac565b50505050955095509592505050565b600160009054906101000a90046001600160a01b03166001600160a01b0316630505c8c96040518163ffffffff1660e01b8152600401602060405180830381865afa1580156119ef573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611a139190613ed7565b6001600160a01b0316336001600160a01b031614600090611a475760405162461bcd60e51b81526004016107b29190613ef4565b506001600160a01b03166000908152600560205260409020805460ff19811660ff90911615179055565b600160009054906101000a90046001600160a01b03166001600160a01b0316630c340a246040518163ffffffff1660e01b8152600401602060405180830381865afa158015611ac4573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611ae89190613ed7565b6001600160a01b0316336001600160a01b03161480611b8e5750600160009054906101000a90046001600160a01b03166001600160a01b031663452a93206040518163ffffffff1660e01b8152600401602060405180830381865afa158015611b55573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611b799190613ed7565b6001600160a01b0316336001600160a01b0316145b80611c205750600160009054906101000a90046001600160a01b03166001600160a01b0316630505c8c96040518163ffffffff1660e01b8152600401602060405180830381865afa158015611be7573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611c0b9190613ed7565b6001600160a01b0316336001600160a01b0316145b611c6c5760405162461bcd60e51b815260206004820152600f60248201527f4f6e6c7920617574686f72697a6564000000000000000000000000000000000060448201526064016107b2565b600160009054906101000a90046001600160a01b03166001600160a01b031663fbfa77cf6040518163ffffffff1660e01b8152600401602060405180830381865afa158015611cbf573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611ce39190613ed7565b6008805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b0392909216919091179055565b6001600160a01b0382811660009081526007602090815260408083208584529091528120549091163314611d885760405162461bcd60e51b815260206004820152601e60248201527f4465706f7369746f72793a207472616e73666572206e6f7420666f756e64000060448201526064016107b2565b6001600160a01b0383166000908152600660205260409020805483908110611db257611db2613e83565b6000918252602090912060029091020160010154600160601b900465ffffffffffff1615611e225760405162461bcd60e51b815260206004820152601960248201527f4465706f7369746f72793a206e6f74652072656465656d65640000000000000060448201526064016107b2565b503360009081526006602052604080822080546001600160a01b038616845291909220805491929184908110611e5a57611e5a613e83565b600091825260208083208454600181810187559585528285206002948502909201805491909402909101908155918401805492909401805465ffffffffffff19811665ffffffffffff94851690811783558654600160301b908190048616026bffffffffffffffffffffffff1990921617178082558554600160601b9081900485160271ffffffffffff000000000000000000000000198216811783559554600160901b9081900490941690930265ffffffffffff60901b1990951677ffffffffffffffffffffffff00000000000000000000000019909316929092179390931790556001600160a01b0385168152600690915260409020805483908110611f6457611f64613e83565b60009182526020822060029091020190815560010180547fffffffffffffffff00000000000000000000000000000000000000000000000016905592915050565b600080600b8381548110611fbb57611fbb613e83565b600091825260208083206040805160c081018252939091015465ffffffffffff8082168552600160301b82048116938501849052600160601b8204811692850192909252600160901b810482166060850152600160c01b81049091166080840152600160f01b900460ff1660a08301529092506120389042613f9c565b9050816040015165ffffffffffff16816009868154811061205b5761205b613e83565b60009182526020909120600490910201600101546114709190600160a81b90046001600160401b03166140c6565b6009818154811061209957600080fd5b600091825260209091206004909102018054600182015460028301546003909301549193506001600160a01b0381169260ff600160a01b830416926001600160401b03600160a81b90930483169282811692600160401b9004169087565b600061210282611fa5565b6009838154811061211557612115613e83565b906000526020600020906004020160010160159054906101000a90046001600160401b03166121449190613eaf565b6001600160401b031692915050565b600d602052816000526040600020818154811061216f57600080fd5b90600052602060002001600091509150505481565b600a818154811061219457600080fd5b60009182526020909120015460ff811691506001600160401b03610100820481169165ffffffffffff69010000000000000000008204811692600160781b830490911691600160a81b90041685565b6001600160a01b03821660009081526006602052604081208054829182918590811061221157612211613e83565b60009182526020918290206040805160a0810182526002909302909101805480845260019091015465ffffffffffff80821695850195909552600160301b8104851692840192909252600160601b8204841660608401819052600160901b90920490931660808301529194509150158015612298575042816040015165ffffffffffff1611155b80156122a45750805115155b9150509250929050565b60606000805b6009548110156122ec576122c781610fe0565b156122da57816122d68161419b565b9250505b806122e48161419b565b9150506122b4565b506000816001600160401b0381111561230757612307613a50565b604051908082528060200260200182016040528015612330578160200160208202803683370190505b5090506000805b60095481101561238d5761234a81610fe0565b1561237b578083838151811061236257612362613e83565b6020908102919091010152816123778161419b565b9250505b806123858161419b565b915050612337565b50909392505050565b600042815b8451811015612472576000806123ca888885815181106123bd576123bd613e83565b60200260200101516121e3565b91509150801561245d576001600160a01b0388166000908152600660205260409020875185919089908690811061240357612403613e83565b60200260200101518154811061241b5761241b613e83565b9060005260206000209060020201600101600c6101000a81548165ffffffffffff021916908365ffffffffffff160217905550818561245a919061413e565b94505b5050808061246a9061419b565b91505061239b565b5082156125125760405163a9059cbb60e01b81526001600160a01b038681166004830152602482018490527f0000000000000000000000000000000000000000000000000000000000000000169063a9059cbb906044016020604051808303816000875af11580156124e8573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061250c919061417e565b506125a7565b6040516339f4769360e01b81526001600160a01b038681166004830152602482018490527f000000000000000000000000000000000000000000000000000000000000000016906339f47693906044016020604051808303816000875af1158015612581573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906125a59190614156565b505b509392505050565b3360009081526006602052604090208054829081106125d0576125d0613e83565b600091825260209091206001600290920201015465ffffffffffff166126385760405162461bcd60e51b815260206004820152601a60248201527f4465706f7369746f72793a206e6f7465206e6f7420666f756e6400000000000060448201526064016107b2565b33600090815260076020908152604080832093835292905220805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b0392909216919091179055565b6006602052816000526040600020818154811061269a57600080fd5b60009182526020909120600290910201805460019091015490925065ffffffffffff8082169250600160301b8204811691600160601b8104821691600160901b9091041685565b600b81815481106126f157600080fd5b60009182526020909120015465ffffffffffff8082169250600160301b8204811691600160601b8104821691600160901b8204811691600160c01b810490911690600160f01b900460ff1686565b6001600160a01b0381166000908152600660209081526040808320805482518185028101850190935280835260609493849084015b828210156127ea5760008481526020908190206040805160a081018252600286029092018054835260019081015465ffffffffffff80821685870152600160301b8204811693850193909352600160601b810483166060850152600160901b900490911660808301529083529092019101612774565b505050509050600080600090505b82518110156128795782818151811061281357612813613e83565b60200260200101516060015165ffffffffffff166000148015612854575082818151811061284357612843613e83565b602002602001015160000151600014155b1561286757816128638161419b565b9250505b806128718161419b565b9150506127f8565b506000816001600160401b0381111561289457612894613a50565b6040519080825280602002602001820160405280156128bd578160200160208202803683370190505b5090506000805b84518110156112f0578481815181106128df576128df613e83565b60200260200101516060015165ffffffffffff166000148015612920575084818151811061290f5761290f613e83565b602002602001015160000151600014155b15612951578083838151811061293857612938613e83565b60209081029190910101528161294d8161419b565b9250505b8061295b8161419b565b9150506128c4565b600854604080516310c1ea0960e31b815290516000926001600160a01b03169163860f50489160048083019260209291908290030181865afa1580156129ad573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906129d19190614156565b600b83815481106129e4576129e4613e83565b600091825260209091200154612a0590600160f01b900460ff16600a61416f565b611091846120f7565b6000818152600c60209081526040808320815160808101835290546001600160401b0381168252600160401b810465ffffffffffff908116948301949094526e010000000000000000000000000000810490931691810191909152600160a01b90910460ff1615156060820181905282918291612a9657600080600093509350935050612aff565b6020810151612aa59042614202565b9250806040015165ffffffffffff168365ffffffffffff1610915081612acc578051612afb565b806040015165ffffffffffff168365ffffffffffff168260000151612af1919061410f565b612afb9190614221565b9350505b9193909250565b612b0f82611fa5565b60098381548110612b2257612b22613e83565b906000526020600020906004020160010160158282829054906101000a90046001600160401b0316612b549190613eaf565b92506101000a8154816001600160401b0302191690836001600160401b0316021790555080600b8381548110612b8c57612b8c613e83565b60009182526020808320909101805465ffffffffffff94909416600160301b026bffffffffffff0000000000001990941693909317909255838152600c909152604090205460ff600160a01b909104161561114d576000828152600c60205260408120908080612bfb86612a0e565b92509250925082600a8781548110612c1557612c15613e83565b60009182526020909120018054600190612c3e90849061010090046001600160401b0316613eaf565b92506101000a8154816001600160401b0302191690836001600160401b031602179055508015612d1557835483908590600090612c859084906001600160401b0316613eaf565b92506101000a8154816001600160401b0302191690836001600160401b031602179055508184600001600e8282829054906101000a900465ffffffffffff16612cce9190614202565b82546101009290920a65ffffffffffff81810219909316918316021790915585546dffffffffffff00000000000000001916600160401b9188169190910217855550612d3c565b83547fffffffffffffffffffffff00ffffffffffffffffffffffffffffffffffffffff1684555b505050505050565b6000600b8281548110612d5957612d59613e83565b600091825260209091200154612d7a90600160f01b900460ff16600a61416f565b612d8383613723565b600a8481548110612d9657612d96613e83565b60009182526020909120015461109b919061010090046001600160401b03166140c6565b6001600160a01b03858116600090815260066020526040908190208054825160a08101938490526319a948db60e21b90935260a483018890529290919081907f0000000000000000000000000000000000000000000000000000000000000000166366a5236c60c48301602060405180830381865afa158015612e41573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612e659190614156565b815265ffffffffffff428116602080840191909152888216604080850191909152600060608086018290528a8516608096870152875460018181018a55988352848320885160029092020190815593870151939097018054928701519787015196909501518416600160901b0265ffffffffffff60901b19968516600160601b029690961677ffffffffffffffffffffffff00000000000000000000000019978516600160301b026bffffffffffffffffffffffff199093169390941692909217179490941617919091179055612f3c8684613806565b6008549091506001600160a01b03166340c10f1930612f5b848a61413e565b6040517fffffffff0000000000000000000000000000000000000000000000000000000060e085901b1681526001600160a01b0390921660048301526024820152604401600060405180830381600087803b158015612fb957600080fd5b505af1158015612fcd573d6000803e3d6000fd5b5050604051631b0cd93b60e31b81523060048201526024810189905260006044820152600160648201527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316925063d866c9d891506084016020604051808303816000875af115801561304c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906130709190614156565b505095945050505050565b604080516001600160a01b0385811660248301528481166044830152606480830185905283518084039091018152608490920183526020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff166323b872dd60e01b17905291516000928392908816916130f49190614247565b6000604051808303816000865af19150503d8060008114613131576040519150601f19603f3d011682016040523d82523d6000602084013e613136565b606091505b5091509150818015613160575080511580613160575080806020019051810190613160919061417e565b612d3c5760405162461bcd60e51b815260206004820152601460248201527f5452414e534645525f46524f4d5f4641494c454400000000000000000000000060448201526064016107b2565b6000600b83815481106131c1576131c1613e83565b60009182526020918290206040805160c081018252929091015465ffffffffffff808216808552600160301b8304821695850195909552600160601b8204811692840192909252600160901b810482166060840152600160c01b810490911660808301819052600160f01b90910460ff1660a0830152909250613243916141b6565b65ffffffffffff168265ffffffffffff161061371e5760006009848154811061326e5761326e613e83565b600091825260208083206040805160e08101825260049094029091018054845260018101546001600160a01b0381169385019390935260ff600160a01b8404161515918401919091526001600160401b03600160a81b9092048216606084015260028101548083166080850152600160401b900490911660a08301526003015460c0820152600a805491935085918790811061330c5761330c613e83565b6000918252602090912001546133319190600160781b900465ffffffffffff16614202565b65ffffffffffff169050600061334686612d44565b90506000836040015161335a578351613394565b60a085015161336a90600a61416f565b8451839061338090670de0b6b3a76400006140c6565b61338a91906140fb565b61339491906140fb565b905082856060015165ffffffffffff16826133af91906140c6565b6133b991906140fb565b600988815481106133cc576133cc613e83565b906000526020600020906004020160020160006101000a8154816001600160401b0302191690836001600160401b03160217905550600083866040015165ffffffffffff168361341c91906140c6565b61342691906140fb565b9050600081600860009054906101000a90046001600160a01b03166001600160a01b031663860f50486040518163ffffffff1660e01b8152600401602060405180830381865afa15801561347e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906134a29190614156565b6134ac90866140c6565b6134b691906140fb565b9050887f3070b0e3e52b8713c7489d32604ea4b0970024f74c6e05319269a19bc1e3a9d9600a8b815481106134ed576134ed613e83565b60009182526020918290200154604080516101009092046001600160401b0390811683528616928201929092520160405180910390a2600a898154811061353657613536613e83565b6000918252602090912001546001600160401b036101009091048116908216106135a45780600a8a8154811061356e5761356e613e83565b9060005260206000200160000160016101000a8154816001600160401b0302191690836001600160401b031602179055506136dc565b600081600a8b815481106135ba576135ba613e83565b6000918252602090912001546135de919061010090046001600160401b0316613eaf565b90506040518060800160405280826001600160401b031681526020018a65ffffffffffff168152602001896080015165ffffffffffff16815260200160011515815250600c60008c815260200190815260200160002060008201518160000160006101000a8154816001600160401b0302191690836001600160401b0316021790555060208201518160000160086101000a81548165ffffffffffff021916908365ffffffffffff160217905550604082015181600001600e6101000a81548165ffffffffffff021916908365ffffffffffff16021790555060608201518160000160146101000a81548160ff021916908315150217905550905050505b87600b8a815481106136f0576136f0613e83565b6000918252602090912001805465ffffffffffff191665ffffffffffff929092169190911790555050505050505b505050565b600854604080516310c1ea0960e31b815290516000926001600160a01b03169163860f50489160048083019260209291908290030181865afa15801561376d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906137919190614156565b600b83815481106137a4576137a4613e83565b6000918252602090912001546137c590600160f01b900460ff16600a61416f565b600984815481106137d8576137d8613e83565b600091825260209091206004909102016001015461109b9190600160a81b90046001600160401b03166140c6565b6000806127106002548561381a91906140c6565b61382491906140fb565b905060006127106003548661383991906140c6565b61384391906140fb565b6001600160a01b03851660009081526005602052604090205490915060ff1615613940576001600160a01b0384166000908152600460205260408120805483929061388f90849061413e565b909155505060015460408051630229549960e51b8152905184926004926000926001600160a01b039092169163452a93209180860191602091819003870181865afa1580156138e2573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906139069190613ed7565b6001600160a01b03166001600160a01b031681526020019081526020016000206000828254613935919061413e565b909155506139ef9050565b61394a818361413e565b60015460408051630229549960e51b815290516004926000926001600160a01b039091169163452a93209180860191602091819003870181865afa158015613996573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906139ba9190613ed7565b6001600160a01b03166001600160a01b0316815260200190815260200160002060008282546139e9919061413e565b90915550505b6139f9818361413e565b95945050505050565b6001600160a01b0381168114613a1757600080fd5b50565b600060208284031215613a2c57600080fd5b813561116681613a02565b600060208284031215613a4957600080fd5b5035919050565b634e487b7160e01b600052604160045260246000fd5b604080519081016001600160401b0381118282101715613a8857613a88613a50565b60405290565b604051601f8201601f191681016001600160401b0381118282101715613ab657613ab6613a50565b604052919050565b6000604051606081018181106001600160401b0382111715613ae257613ae2613a50565b6040529050806060830184811115613af957600080fd5b835b81811015613b13578035835260209283019201613afb565b50505092915050565b8015158114613a1757600080fd5b8035613b3581613b1c565b919050565b600082601f830112613b4b57600080fd5b613b53613a66565b806040840185811115613b6557600080fd5b845b818110156112f0578035845260209384019301613b67565b600082601f830112613b9057600080fd5b613b98613a66565b806040840185811115613baa57600080fd5b845b818110156112f057803563ffffffff81168114613bc95760008081fd5b845260209384019301613bac565b60008060008060006101408688031215613bf057600080fd5b8535613bfb81613a02565b94506020603f87018813613c0e57600080fd5b613c1a88828901613abe565b945087609f880112613c2b57600080fd5b613c33613a66565b8060c089018a811115613c4557600080fd5b60808a015b81811015613c6a578035613c5d81613b1c565b8452928401928401613c4a565b50819650613c788b82613b3a565b955050505050613c8c876101008801613b7f565b90509295509295909350565b60008060408385031215613cab57600080fd5b8235613cb681613a02565b91506020830135613cc681613b1c565b809150509250929050565b6020808252825182820181905260009190848201906040850190845b81811015613d0957835183529284019291840191600101613ced565b50909695505050505050565b60008060408385031215613d2857600080fd5b50508035926020909101359150565b600080600080600060a08688031215613d4f57600080fd5b8535945060208601359350604086013592506060860135613d6f81613a02565b91506080860135613d7f81613a02565b809150509295509295909350565b60008060408385031215613da057600080fd5b8235613dab81613a02565b946020939093013593505050565b600080600060608486031215613dce57600080fd5b8335613dd981613a02565b92506020848101356001600160401b0380821115613df657600080fd5b818701915087601f830112613e0a57600080fd5b813581811115613e1c57613e1c613a50565b8060051b9150613e2d848301613a8e565b818152918301840191848101908a841115613e4757600080fd5b938501935b83851015613e6557843582529385019390850190613e4c565b809750505050505050613e7a60408501613b2a565b90509250925092565b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052601160045260246000fd5b60006001600160401b0383811690831681811015613ecf57613ecf613e99565b039392505050565b600060208284031215613ee957600080fd5b815161116681613a02565b600060208083526000845481600182811c915080831680613f1657607f831692505b858310811415613f3457634e487b7160e01b85526022600452602485fd5b878601838152602001818015613f515760018114613f6257613f8d565b60ff19861682528782019650613f8d565b60008b81526020902060005b86811015613f8757815484820152908501908901613f6e565b83019750505b50949998505050505050505050565b600082821015613fae57613fae613e99565b500390565b600060208284031215613fc557600080fd5b815160ff8116811461116657600080fd5b600181815b80851115614011578160001904821115613ff757613ff7613e99565b8085161561400457918102915b93841c9390800290613fdb565b509250929050565b60008261402857506001611043565b8161403557506000611043565b816001811461404b576002811461405557614071565b6001915050611043565b60ff84111561406657614066613e99565b50506001821b611043565b5060208310610133831016604e8410600b8410161715614094575081810a611043565b61409e8383613fd6565b80600019048211156140b2576140b2613e99565b029392505050565b60006111668383614019565b60008160001904831182151516156140e0576140e0613e99565b500290565b634e487b7160e01b600052601260045260246000fd5b60008261410a5761410a6140e5565b500490565b60006001600160401b038083168185168183048111821515161561413557614135613e99565b02949350505050565b6000821982111561415157614151613e99565b500190565b60006020828403121561416857600080fd5b5051919050565b600061116660ff841683614019565b60006020828403121561419057600080fd5b815161116681613b1c565b60006000198214156141af576141af613e99565b5060010190565b600065ffffffffffff8083168185168083038211156141d7576141d7613e99565b01949350505050565b60006001600160401b038083168185168083038211156141d7576141d7613e99565b600065ffffffffffff83811690831681811015613ecf57613ecf613e99565b60006001600160401b038084168061423b5761423b6140e5565b92169190910492915050565b6000825160005b81811015614268576020818601810151858301520161424e565b81811115614277576000828501525b50919091019291505056fea164736f6c634300080a000a",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106102265760003560e01c8063abbf4b171161012a578063c9b67af5116100bd578063e0b117ff1161008c578063e481b26511610071578063e481b26514610680578063f1b7dc7814610693578063f3191a46146106a657600080fd5b8063e0b117ff146105e1578063e3684e391461062957600080fd5b8063c9b67af514610590578063d62fbdd314610598578063d6db4df8146105ab578063d936547e146105be57600080fd5b8063bf7e214f116100f9578063bf7e214f146104db578063c0680e2014610506578063c0aa0e8a14610519578063c3e0fb1c1461056857600080fd5b8063abbf4b17146103a8578063b1283e77146103d3578063bc3b2b1214610433578063bcb29667146104c857600080fd5b806346aed74e116101bd5780637a9e5e4b1161018c5780639b19251a116101715780639b19251a1461037a5780639c7697871461038d578063a42206101461039557600080fd5b80637a9e5e4b146103395780637c770aae1461034c57600080fd5b806346aed74e146102e057806364914439146102f3578063654e51e7146103135780636a6c575d1461032657600080fd5b806321a7d29b116101f957806321a7d29b1461028f57806327507458146102a25780633adec5a7146102c55780633d18b912146102d857600080fd5b80630700037d1461022b5780630a9d85eb1461025e5780630aebeb4e146102715780631885f58014610286575b600080fd5b61024b610239366004613a1a565b60046020526000908152604090205481565b6040519081526020015b60405180910390f35b61024b61026c366004613a37565b6106af565b61028461027f366004613a37565b610707565b005b61024b60025481565b61024b61029d366004613bd7565b610852565b6102b56102b0366004613a37565b610fe0565b6040519015158152602001610255565b61024b6102d3366004613a37565b611049565b6102846110a5565b61024b6102ee366004613c98565b611151565b610306610301366004613a1a565b61116d565b6040516102559190613cd1565b610284610321366004613d15565b6112fb565b61024b610334366004613d15565b6113b2565b610284610347366004613a1a565b611482565b61035f61035a366004613d37565b611585565b60408051938452602084019290925290820152606001610255565b610284610388366004613a1a565b61199c565b610284611a71565b61024b6103a3366004613d8d565b611d12565b6103bb6103b6366004613a37565b611fa5565b6040516001600160401b039091168152602001610255565b6103e66103e1366004613a37565b612089565b604080519788526001600160a01b039096166020880152931515948601949094526001600160401b0391821660608601528116608085015290911660a083015260c082015260e001610255565b610490610441366004613a37565b600c602052600090815260409020546001600160401b0381169065ffffffffffff600160401b82048116916e01000000000000000000000000000081049091169060ff600160a01b9091041684565b604080516001600160401b0395909516855265ffffffffffff9384166020860152919092169083015215156060820152608001610255565b61024b6104d6366004613a37565b6120f7565b6001546104ee906001600160a01b031681565b6040516001600160a01b039091168152602001610255565b61024b610514366004613d8d565b612153565b61052c610527366004613a37565b612184565b6040805195151586526001600160401b03948516602087015265ffffffffffff938416908601529116606084015216608082015260a001610255565b61057b610576366004613d8d565b6121e3565b60408051928352901515602083015201610255565b6103066122ae565b61024b6105a6366004613db9565b612396565b6102846105b9366004613d8d565b6125af565b6102b56105cc366004613a1a565b60056020526000908152604090205460ff1681565b6105f46105ef366004613d8d565b61267e565b6040805195865265ffffffffffff9485166020870152928416928501929092528216606084015216608082015260a001610255565b61063c610637366004613a37565b6126e1565b6040805165ffffffffffff97881681529587166020870152938616938501939093529084166060840152909216608082015260ff90911660a082015260c001610255565b61030661068e366004613a1a565b61273f565b61024b6106a1366004613a37565b612963565b61024b60035481565b6000806106bb83612a0e565b5050905080600a84815481106106d3576106d3613e83565b6000918252602090912001546106f7919061010090046001600160401b0316613eaf565b6001600160401b03169392505050565b600160009054906101000a90046001600160a01b03166001600160a01b0316630505c8c96040518163ffffffff1660e01b8152600401602060405180830381865afa15801561075a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061077e9190613ed7565b6001600160a01b0316336001600160a01b0316146000906107bb5760405162461bcd60e51b81526004016107b29190613ef4565b60405180910390fd5b5042600a82815481106107d0576107d0613e83565b90600052602060002001600001600f6101000a81548165ffffffffffff021916908365ffffffffffff16021790555060006009828154811061081457610814613e83565b6000918252602082206004909102019190915560405182917f8401d05adbea6548a6999cc1540766e6d2ff919292142862893d0e62ec79fbe591a250565b60015460408051630505c8c960e01b815290516000926001600160a01b031691630505c8c99160048083019260209291908290030181865afa15801561089c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108c09190613ed7565b6001600160a01b0316336001600160a01b0316146000906108f45760405162461bcd60e51b81526004016107b29190613ef4565b506020830151600090610908904290613f9c565b90506000876001600160a01b031663313ce5676040518163ffffffff1660e01b8152600401602060405180830381865afa15801561094a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061096e9190613fb3565b60ff1690506000868160200201516109875787516109bf565b61099282600a6140ba565b602089015189516109ab90670de0b6b3a76400006140c6565b6109b591906140fb565b6109bf91906140fb565b855190915060009084906109d99063ffffffff168461410f565b6001600160401b03166109ec91906140fb565b90506000620186a08a60026020020151610a0f906001600160401b0386166140c6565b610a1991906140fb565b610a2c906001600160401b03851661413e565b90506000836001600160401b0316600860009054906101000a90046001600160a01b03166001600160a01b031663860f50486040518163ffffffff1660e01b8152600401602060405180830381865afa158015610a8d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ab19190614156565b60208d0151610ac091906140c6565b610aca91906140fb565b600980546040805160e0810190915290995091925090808d6000602002015181526020018e6001600160a01b031681526020018c600060028110610b1057610b10613e83565b60209081029190910151151582526001600160401b0380891683830152878116604080850191909152600060608086018290526080958601829052875460018181018a5598835291859020875160049093020191825593860151818801805488850151968901518616600160a81b0267ffffffffffffffff60a81b19971515600160a01b027fffffffffffffffffffffff0000000000000000000000000000000000000000009092166001600160a01b03909416939093171795909516179093559284015160028301805460a0808801518516600160401b026fffffffffffffffffffffffffffffffff19909216939094169290921791909117905560c09093015160039091015580519182019052600a9181908d90602002015115158152602001836001600160401b031681526020018b600060028110610c5457610c54613e83565b602002015165ffffffffffff1681526020018b600160028110610c7957610c79613e83565b6020908102919091015165ffffffffffff90811683526001600160401b038088169383019390935284546001810186556000958652828620855191018054868501516040808901516060808b01516080909b01518a16600160a81b0267ffffffffffffffff60a81b199b8916600160781b027fffffffffffffffffffffff000000000000ffffffffffffffffffffffffffffff938a16690100000000000000000002939093167fffffffffffffffffffffff000000000000000000000000ffffffffffffffffff95909b166101000268ffffffffffffffff00199815159890981668ffffffffffffffffff1990961695909517969096179290921697909717179690961695909517909455825160c081018452428216808252928101929092528a1691810191909152600b9290918201908b906020908102919091015163ffffffff168252018a6001602002015163ffffffff1665ffffffffffff1681526020018760ff168152509080600181540180825580915050600190039060005260206000200160009091909190915060008201518160000160006101000a81548165ffffffffffff021916908365ffffffffffff16021790555060208201518160000160066101000a81548165ffffffffffff021916908365ffffffffffff160217905550604082015181600001600c6101000a81548165ffffffffffff021916908365ffffffffffff16021790555060608201518160000160126101000a81548165ffffffffffff021916908365ffffffffffff16021790555060808201518160000160186101000a81548165ffffffffffff021916908365ffffffffffff16021790555060a082015181600001601e6101000a81548160ff021916908360ff1602179055505050600d60008d6001600160a01b03166001600160a01b031681526020019081526020016000208790806001815401808255809150506001900390600052602060002001600090919091909150558b6001600160a01b03167f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316887f2f6ff727bd580b1d1b8332e28aa93ed4ec9d8b08d6e30d6b4c9f7aa63ca17f638e600160038110610fb557610fb5613e83565b6020020151604051610fc991815260200190565b60405180910390a450505050505095945050505050565b600060098281548110610ff557610ff5613e83565b906000526020600020906004020160000154600014158015611043575042600a838154811061102657611026613e83565b600091825260209091200154600160781b900465ffffffffffff16115b92915050565b6000600b828154811061105e5761105e613e83565b60009182526020909120015461107f90600160f01b900460ff16600a61416f565b61108883612963565b611091846106af565b61109b91906140c6565b61104391906140fb565b33600081815260046020819052604080832080549390555163a9059cbb60e01b81529081019290925260248201819052906001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000169063a9059cbb906044016020604051808303816000875af1158015611129573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061114d919061417e565b5050565b6000611166836111608561273f565b84612396565b9392505050565b6001600160a01b0381166000908152600d602090815260408083208054825181850281018501909352808352606094938301828280156111cc57602002820191906000526020600020905b8154815260200190600101908083116111b8575b50505050509050600080600090505b825181101561122b576112068382815181106111f9576111f9613e83565b6020026020010151610fe0565b1561121957816112158161419b565b9250505b806112238161419b565b9150506111db565b506000816001600160401b0381111561124657611246613a50565b60405190808252806020026020018201604052801561126f578160200160208202803683370190505b5090506000805b84518110156112f0576112948582815181106111f9576111f9613e83565b156112de578481815181106112ab576112ab613e83565b60200260200101518383815181106112c5576112c5613e83565b6020908102919091010152816112da8161419b565b9250505b806112e88161419b565b915050611276565b509095945050505050565b600160009054906101000a90046001600160a01b03166001600160a01b0316630c340a246040518163ffffffff1660e01b8152600401602060405180830381865afa15801561134e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906113729190613ed7565b6001600160a01b0316336001600160a01b0316146000906113a65760405162461bcd60e51b81526004016107b29190613ef4565b50600391909155600255565b600080600b83815481106113c8576113c8613e83565b60009182526020918290206040805160c081018252919092015465ffffffffffff8082168352600160301b8204811694830194909452600160601b8104841692820192909252600160901b820483166060820152600160c01b8204909216608083015260ff600160f01b9091041660a0820181905290915061144b90600a61416f565b61145484611049565b61146686670de0b6b3a76400006140c6565b61147091906140fb565b61147a91906140fb565b949350505050565b600160009054906101000a90046001600160a01b03166001600160a01b0316630c340a246040518163ffffffff1660e01b8152600401602060405180830381865afa1580156114d5573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906114f99190613ed7565b6001600160a01b0316336001600160a01b03161460009061152d5760405162461bcd60e51b81526004016107b29190613ef4565b506001805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b0383169081179091556040517f2f658b440c35314f52658ea8a740e05b284cdc84dc9ae01e891f21b8933e7cad90600090a250565b6000806000806009898154811061159e5761159e613e83565b906000526020600020906004020190506000600a8a815481106115c3576115c3613e83565b60009182526020918290206040805160a081018252919092015460ff8116151582526001600160401b03610100820481169483019490945265ffffffffffff69010000000000000000008204811693830193909352600160781b8104831660608301819052600160a81b9091049093166080820152925042919082161061168c5760405162461bcd60e51b815260206004820152601c60248201527f4465706f7369746f72793a206d61726b657420636f6e636c756465640000000060448201526064016107b2565b6116968b82612b06565b60006116a18c612d44565b9050898111156116f35760405162461bcd60e51b815260206004820152601f60248201527f4465706f7369746f72793a206d6f7265207468616e206d61782070726963650060448201526064016107b2565b600b8c8154811061170657611706613e83565b60009182526020909120015461172790600160f01b900460ff16600a61416f565b8161173a8d670de0b6b3a76400006140c6565b61174491906140fb565b61174e91906140fb565b60028501549097506001600160401b03168711156117ae5760405162461bcd60e51b815260206004820152601d60248201527f4465706f7369746f72793a206d61782073697a6520657863656564656400000060448201526064016107b2565b6001840154600160a01b900460ff166117c757866117c9565b8a5b8460000160008282546117dc9190613f9c565b909155505082516117f1578260400151611801565b81836040015161180191906141b6565b65ffffffffffff1695508a84600301600082825461181f919061413e565b909155505060028401805488919060089061184b908490600160401b90046001600160401b03166141e0565b92506101000a8154816001600160401b0302191690836001600160401b03160217905550868460010160158282829054906101000a90046001600160401b031661189591906141e0565b92506101000a8154816001600160401b0302191690836001600160401b031602179055508b7f7880508a48fd3aee88f7e15917d85e39c3ad059e51ad4aca9bb46e7b4938b9618c836040516118f4929190918252602082015260400190565b60405180910390a26119098988888f8c612dba565b600854600186015491965061192d916001600160a01b03908116913391168e61307b565b600184015460808401516001600160401b03600160a81b9092048216911610156119835760008085556040518d917f8401d05adbea6548a6999cc1540766e6d2ff919292142862893d0e62ec79fbe591a261198d565b61198d8c836131ac565b50505050955095509592505050565b600160009054906101000a90046001600160a01b03166001600160a01b0316630505c8c96040518163ffffffff1660e01b8152600401602060405180830381865afa1580156119ef573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611a139190613ed7565b6001600160a01b0316336001600160a01b031614600090611a475760405162461bcd60e51b81526004016107b29190613ef4565b506001600160a01b03166000908152600560205260409020805460ff19811660ff90911615179055565b600160009054906101000a90046001600160a01b03166001600160a01b0316630c340a246040518163ffffffff1660e01b8152600401602060405180830381865afa158015611ac4573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611ae89190613ed7565b6001600160a01b0316336001600160a01b03161480611b8e5750600160009054906101000a90046001600160a01b03166001600160a01b031663452a93206040518163ffffffff1660e01b8152600401602060405180830381865afa158015611b55573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611b799190613ed7565b6001600160a01b0316336001600160a01b0316145b80611c205750600160009054906101000a90046001600160a01b03166001600160a01b0316630505c8c96040518163ffffffff1660e01b8152600401602060405180830381865afa158015611be7573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611c0b9190613ed7565b6001600160a01b0316336001600160a01b0316145b611c6c5760405162461bcd60e51b815260206004820152600f60248201527f4f6e6c7920617574686f72697a6564000000000000000000000000000000000060448201526064016107b2565b600160009054906101000a90046001600160a01b03166001600160a01b031663fbfa77cf6040518163ffffffff1660e01b8152600401602060405180830381865afa158015611cbf573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611ce39190613ed7565b6008805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b0392909216919091179055565b6001600160a01b0382811660009081526007602090815260408083208584529091528120549091163314611d885760405162461bcd60e51b815260206004820152601e60248201527f4465706f7369746f72793a207472616e73666572206e6f7420666f756e64000060448201526064016107b2565b6001600160a01b0383166000908152600660205260409020805483908110611db257611db2613e83565b6000918252602090912060029091020160010154600160601b900465ffffffffffff1615611e225760405162461bcd60e51b815260206004820152601960248201527f4465706f7369746f72793a206e6f74652072656465656d65640000000000000060448201526064016107b2565b503360009081526006602052604080822080546001600160a01b038616845291909220805491929184908110611e5a57611e5a613e83565b600091825260208083208454600181810187559585528285206002948502909201805491909402909101908155918401805492909401805465ffffffffffff19811665ffffffffffff94851690811783558654600160301b908190048616026bffffffffffffffffffffffff1990921617178082558554600160601b9081900485160271ffffffffffff000000000000000000000000198216811783559554600160901b9081900490941690930265ffffffffffff60901b1990951677ffffffffffffffffffffffff00000000000000000000000019909316929092179390931790556001600160a01b0385168152600690915260409020805483908110611f6457611f64613e83565b60009182526020822060029091020190815560010180547fffffffffffffffff00000000000000000000000000000000000000000000000016905592915050565b600080600b8381548110611fbb57611fbb613e83565b600091825260208083206040805160c081018252939091015465ffffffffffff8082168552600160301b82048116938501849052600160601b8204811692850192909252600160901b810482166060850152600160c01b81049091166080840152600160f01b900460ff1660a08301529092506120389042613f9c565b9050816040015165ffffffffffff16816009868154811061205b5761205b613e83565b60009182526020909120600490910201600101546114709190600160a81b90046001600160401b03166140c6565b6009818154811061209957600080fd5b600091825260209091206004909102018054600182015460028301546003909301549193506001600160a01b0381169260ff600160a01b830416926001600160401b03600160a81b90930483169282811692600160401b9004169087565b600061210282611fa5565b6009838154811061211557612115613e83565b906000526020600020906004020160010160159054906101000a90046001600160401b03166121449190613eaf565b6001600160401b031692915050565b600d602052816000526040600020818154811061216f57600080fd5b90600052602060002001600091509150505481565b600a818154811061219457600080fd5b60009182526020909120015460ff811691506001600160401b03610100820481169165ffffffffffff69010000000000000000008204811692600160781b830490911691600160a81b90041685565b6001600160a01b03821660009081526006602052604081208054829182918590811061221157612211613e83565b60009182526020918290206040805160a0810182526002909302909101805480845260019091015465ffffffffffff80821695850195909552600160301b8104851692840192909252600160601b8204841660608401819052600160901b90920490931660808301529194509150158015612298575042816040015165ffffffffffff1611155b80156122a45750805115155b9150509250929050565b60606000805b6009548110156122ec576122c781610fe0565b156122da57816122d68161419b565b9250505b806122e48161419b565b9150506122b4565b506000816001600160401b0381111561230757612307613a50565b604051908082528060200260200182016040528015612330578160200160208202803683370190505b5090506000805b60095481101561238d5761234a81610fe0565b1561237b578083838151811061236257612362613e83565b6020908102919091010152816123778161419b565b9250505b806123858161419b565b915050612337565b50909392505050565b600042815b8451811015612472576000806123ca888885815181106123bd576123bd613e83565b60200260200101516121e3565b91509150801561245d576001600160a01b0388166000908152600660205260409020875185919089908690811061240357612403613e83565b60200260200101518154811061241b5761241b613e83565b9060005260206000209060020201600101600c6101000a81548165ffffffffffff021916908365ffffffffffff160217905550818561245a919061413e565b94505b5050808061246a9061419b565b91505061239b565b5082156125125760405163a9059cbb60e01b81526001600160a01b038681166004830152602482018490527f0000000000000000000000000000000000000000000000000000000000000000169063a9059cbb906044016020604051808303816000875af11580156124e8573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061250c919061417e565b506125a7565b6040516339f4769360e01b81526001600160a01b038681166004830152602482018490527f000000000000000000000000000000000000000000000000000000000000000016906339f47693906044016020604051808303816000875af1158015612581573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906125a59190614156565b505b509392505050565b3360009081526006602052604090208054829081106125d0576125d0613e83565b600091825260209091206001600290920201015465ffffffffffff166126385760405162461bcd60e51b815260206004820152601a60248201527f4465706f7369746f72793a206e6f7465206e6f7420666f756e6400000000000060448201526064016107b2565b33600090815260076020908152604080832093835292905220805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b0392909216919091179055565b6006602052816000526040600020818154811061269a57600080fd5b60009182526020909120600290910201805460019091015490925065ffffffffffff8082169250600160301b8204811691600160601b8104821691600160901b9091041685565b600b81815481106126f157600080fd5b60009182526020909120015465ffffffffffff8082169250600160301b8204811691600160601b8104821691600160901b8204811691600160c01b810490911690600160f01b900460ff1686565b6001600160a01b0381166000908152600660209081526040808320805482518185028101850190935280835260609493849084015b828210156127ea5760008481526020908190206040805160a081018252600286029092018054835260019081015465ffffffffffff80821685870152600160301b8204811693850193909352600160601b810483166060850152600160901b900490911660808301529083529092019101612774565b505050509050600080600090505b82518110156128795782818151811061281357612813613e83565b60200260200101516060015165ffffffffffff166000148015612854575082818151811061284357612843613e83565b602002602001015160000151600014155b1561286757816128638161419b565b9250505b806128718161419b565b9150506127f8565b506000816001600160401b0381111561289457612894613a50565b6040519080825280602002602001820160405280156128bd578160200160208202803683370190505b5090506000805b84518110156112f0578481815181106128df576128df613e83565b60200260200101516060015165ffffffffffff166000148015612920575084818151811061290f5761290f613e83565b602002602001015160000151600014155b15612951578083838151811061293857612938613e83565b60209081029190910101528161294d8161419b565b9250505b8061295b8161419b565b9150506128c4565b600854604080516310c1ea0960e31b815290516000926001600160a01b03169163860f50489160048083019260209291908290030181865afa1580156129ad573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906129d19190614156565b600b83815481106129e4576129e4613e83565b600091825260209091200154612a0590600160f01b900460ff16600a61416f565b611091846120f7565b6000818152600c60209081526040808320815160808101835290546001600160401b0381168252600160401b810465ffffffffffff908116948301949094526e010000000000000000000000000000810490931691810191909152600160a01b90910460ff1615156060820181905282918291612a9657600080600093509350935050612aff565b6020810151612aa59042614202565b9250806040015165ffffffffffff168365ffffffffffff1610915081612acc578051612afb565b806040015165ffffffffffff168365ffffffffffff168260000151612af1919061410f565b612afb9190614221565b9350505b9193909250565b612b0f82611fa5565b60098381548110612b2257612b22613e83565b906000526020600020906004020160010160158282829054906101000a90046001600160401b0316612b549190613eaf565b92506101000a8154816001600160401b0302191690836001600160401b0316021790555080600b8381548110612b8c57612b8c613e83565b60009182526020808320909101805465ffffffffffff94909416600160301b026bffffffffffff0000000000001990941693909317909255838152600c909152604090205460ff600160a01b909104161561114d576000828152600c60205260408120908080612bfb86612a0e565b92509250925082600a8781548110612c1557612c15613e83565b60009182526020909120018054600190612c3e90849061010090046001600160401b0316613eaf565b92506101000a8154816001600160401b0302191690836001600160401b031602179055508015612d1557835483908590600090612c859084906001600160401b0316613eaf565b92506101000a8154816001600160401b0302191690836001600160401b031602179055508184600001600e8282829054906101000a900465ffffffffffff16612cce9190614202565b82546101009290920a65ffffffffffff81810219909316918316021790915585546dffffffffffff00000000000000001916600160401b9188169190910217855550612d3c565b83547fffffffffffffffffffffff00ffffffffffffffffffffffffffffffffffffffff1684555b505050505050565b6000600b8281548110612d5957612d59613e83565b600091825260209091200154612d7a90600160f01b900460ff16600a61416f565b612d8383613723565b600a8481548110612d9657612d96613e83565b60009182526020909120015461109b919061010090046001600160401b03166140c6565b6001600160a01b03858116600090815260066020526040908190208054825160a08101938490526319a948db60e21b90935260a483018890529290919081907f0000000000000000000000000000000000000000000000000000000000000000166366a5236c60c48301602060405180830381865afa158015612e41573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612e659190614156565b815265ffffffffffff428116602080840191909152888216604080850191909152600060608086018290528a8516608096870152875460018181018a55988352848320885160029092020190815593870151939097018054928701519787015196909501518416600160901b0265ffffffffffff60901b19968516600160601b029690961677ffffffffffffffffffffffff00000000000000000000000019978516600160301b026bffffffffffffffffffffffff199093169390941692909217179490941617919091179055612f3c8684613806565b6008549091506001600160a01b03166340c10f1930612f5b848a61413e565b6040517fffffffff0000000000000000000000000000000000000000000000000000000060e085901b1681526001600160a01b0390921660048301526024820152604401600060405180830381600087803b158015612fb957600080fd5b505af1158015612fcd573d6000803e3d6000fd5b5050604051631b0cd93b60e31b81523060048201526024810189905260006044820152600160648201527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316925063d866c9d891506084016020604051808303816000875af115801561304c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906130709190614156565b505095945050505050565b604080516001600160a01b0385811660248301528481166044830152606480830185905283518084039091018152608490920183526020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff166323b872dd60e01b17905291516000928392908816916130f49190614247565b6000604051808303816000865af19150503d8060008114613131576040519150601f19603f3d011682016040523d82523d6000602084013e613136565b606091505b5091509150818015613160575080511580613160575080806020019051810190613160919061417e565b612d3c5760405162461bcd60e51b815260206004820152601460248201527f5452414e534645525f46524f4d5f4641494c454400000000000000000000000060448201526064016107b2565b6000600b83815481106131c1576131c1613e83565b60009182526020918290206040805160c081018252929091015465ffffffffffff808216808552600160301b8304821695850195909552600160601b8204811692840192909252600160901b810482166060840152600160c01b810490911660808301819052600160f01b90910460ff1660a0830152909250613243916141b6565b65ffffffffffff168265ffffffffffff161061371e5760006009848154811061326e5761326e613e83565b600091825260208083206040805160e08101825260049094029091018054845260018101546001600160a01b0381169385019390935260ff600160a01b8404161515918401919091526001600160401b03600160a81b9092048216606084015260028101548083166080850152600160401b900490911660a08301526003015460c0820152600a805491935085918790811061330c5761330c613e83565b6000918252602090912001546133319190600160781b900465ffffffffffff16614202565b65ffffffffffff169050600061334686612d44565b90506000836040015161335a578351613394565b60a085015161336a90600a61416f565b8451839061338090670de0b6b3a76400006140c6565b61338a91906140fb565b61339491906140fb565b905082856060015165ffffffffffff16826133af91906140c6565b6133b991906140fb565b600988815481106133cc576133cc613e83565b906000526020600020906004020160020160006101000a8154816001600160401b0302191690836001600160401b03160217905550600083866040015165ffffffffffff168361341c91906140c6565b61342691906140fb565b9050600081600860009054906101000a90046001600160a01b03166001600160a01b031663860f50486040518163ffffffff1660e01b8152600401602060405180830381865afa15801561347e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906134a29190614156565b6134ac90866140c6565b6134b691906140fb565b9050887f3070b0e3e52b8713c7489d32604ea4b0970024f74c6e05319269a19bc1e3a9d9600a8b815481106134ed576134ed613e83565b60009182526020918290200154604080516101009092046001600160401b0390811683528616928201929092520160405180910390a2600a898154811061353657613536613e83565b6000918252602090912001546001600160401b036101009091048116908216106135a45780600a8a8154811061356e5761356e613e83565b9060005260206000200160000160016101000a8154816001600160401b0302191690836001600160401b031602179055506136dc565b600081600a8b815481106135ba576135ba613e83565b6000918252602090912001546135de919061010090046001600160401b0316613eaf565b90506040518060800160405280826001600160401b031681526020018a65ffffffffffff168152602001896080015165ffffffffffff16815260200160011515815250600c60008c815260200190815260200160002060008201518160000160006101000a8154816001600160401b0302191690836001600160401b0316021790555060208201518160000160086101000a81548165ffffffffffff021916908365ffffffffffff160217905550604082015181600001600e6101000a81548165ffffffffffff021916908365ffffffffffff16021790555060608201518160000160146101000a81548160ff021916908315150217905550905050505b87600b8a815481106136f0576136f0613e83565b6000918252602090912001805465ffffffffffff191665ffffffffffff929092169190911790555050505050505b505050565b600854604080516310c1ea0960e31b815290516000926001600160a01b03169163860f50489160048083019260209291908290030181865afa15801561376d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906137919190614156565b600b83815481106137a4576137a4613e83565b6000918252602090912001546137c590600160f01b900460ff16600a61416f565b600984815481106137d8576137d8613e83565b600091825260209091206004909102016001015461109b9190600160a81b90046001600160401b03166140c6565b6000806127106002548561381a91906140c6565b61382491906140fb565b905060006127106003548661383991906140c6565b61384391906140fb565b6001600160a01b03851660009081526005602052604090205490915060ff1615613940576001600160a01b0384166000908152600460205260408120805483929061388f90849061413e565b909155505060015460408051630229549960e51b8152905184926004926000926001600160a01b039092169163452a93209180860191602091819003870181865afa1580156138e2573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906139069190613ed7565b6001600160a01b03166001600160a01b031681526020019081526020016000206000828254613935919061413e565b909155506139ef9050565b61394a818361413e565b60015460408051630229549960e51b815290516004926000926001600160a01b039091169163452a93209180860191602091819003870181865afa158015613996573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906139ba9190613ed7565b6001600160a01b03166001600160a01b0316815260200190815260200160002060008282546139e9919061413e565b90915550505b6139f9818361413e565b95945050505050565b6001600160a01b0381168114613a1757600080fd5b50565b600060208284031215613a2c57600080fd5b813561116681613a02565b600060208284031215613a4957600080fd5b5035919050565b634e487b7160e01b600052604160045260246000fd5b604080519081016001600160401b0381118282101715613a8857613a88613a50565b60405290565b604051601f8201601f191681016001600160401b0381118282101715613ab657613ab6613a50565b604052919050565b6000604051606081018181106001600160401b0382111715613ae257613ae2613a50565b6040529050806060830184811115613af957600080fd5b835b81811015613b13578035835260209283019201613afb565b50505092915050565b8015158114613a1757600080fd5b8035613b3581613b1c565b919050565b600082601f830112613b4b57600080fd5b613b53613a66565b806040840185811115613b6557600080fd5b845b818110156112f0578035845260209384019301613b67565b600082601f830112613b9057600080fd5b613b98613a66565b806040840185811115613baa57600080fd5b845b818110156112f057803563ffffffff81168114613bc95760008081fd5b845260209384019301613bac565b60008060008060006101408688031215613bf057600080fd5b8535613bfb81613a02565b94506020603f87018813613c0e57600080fd5b613c1a88828901613abe565b945087609f880112613c2b57600080fd5b613c33613a66565b8060c089018a811115613c4557600080fd5b60808a015b81811015613c6a578035613c5d81613b1c565b8452928401928401613c4a565b50819650613c788b82613b3a565b955050505050613c8c876101008801613b7f565b90509295509295909350565b60008060408385031215613cab57600080fd5b8235613cb681613a02565b91506020830135613cc681613b1c565b809150509250929050565b6020808252825182820181905260009190848201906040850190845b81811015613d0957835183529284019291840191600101613ced565b50909695505050505050565b60008060408385031215613d2857600080fd5b50508035926020909101359150565b600080600080600060a08688031215613d4f57600080fd5b8535945060208601359350604086013592506060860135613d6f81613a02565b91506080860135613d7f81613a02565b809150509295509295909350565b60008060408385031215613da057600080fd5b8235613dab81613a02565b946020939093013593505050565b600080600060608486031215613dce57600080fd5b8335613dd981613a02565b92506020848101356001600160401b0380821115613df657600080fd5b818701915087601f830112613e0a57600080fd5b813581811115613e1c57613e1c613a50565b8060051b9150613e2d848301613a8e565b818152918301840191848101908a841115613e4757600080fd5b938501935b83851015613e6557843582529385019390850190613e4c565b809750505050505050613e7a60408501613b2a565b90509250925092565b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052601160045260246000fd5b60006001600160401b0383811690831681811015613ecf57613ecf613e99565b039392505050565b600060208284031215613ee957600080fd5b815161116681613a02565b600060208083526000845481600182811c915080831680613f1657607f831692505b858310811415613f3457634e487b7160e01b85526022600452602485fd5b878601838152602001818015613f515760018114613f6257613f8d565b60ff19861682528782019650613f8d565b60008b81526020902060005b86811015613f8757815484820152908501908901613f6e565b83019750505b50949998505050505050505050565b600082821015613fae57613fae613e99565b500390565b600060208284031215613fc557600080fd5b815160ff8116811461116657600080fd5b600181815b80851115614011578160001904821115613ff757613ff7613e99565b8085161561400457918102915b93841c9390800290613fdb565b509250929050565b60008261402857506001611043565b8161403557506000611043565b816001811461404b576002811461405557614071565b6001915050611043565b60ff84111561406657614066613e99565b50506001821b611043565b5060208310610133831016604e8410600b8410161715614094575081810a611043565b61409e8383613fd6565b80600019048211156140b2576140b2613e99565b029392505050565b60006111668383614019565b60008160001904831182151516156140e0576140e0613e99565b500290565b634e487b7160e01b600052601260045260246000fd5b60008261410a5761410a6140e5565b500490565b60006001600160401b038083168185168183048111821515161561413557614135613e99565b02949350505050565b6000821982111561415157614151613e99565b500190565b60006020828403121561416857600080fd5b5051919050565b600061116660ff841683614019565b60006020828403121561419057600080fd5b815161116681613b1c565b60006000198214156141af576141af613e99565b5060010190565b600065ffffffffffff8083168185168083038211156141d7576141d7613e99565b01949350505050565b60006001600160401b038083168185168083038211156141d7576141d7613e99565b600065ffffffffffff83811690831681811015613ecf57613ecf613e99565b60006001600160401b038084168061423b5761423b6140e5565b92169190910492915050565b6000825160005b81811015614268576020818601810151858301520161424e565b81811115614277576000828501525b50919091019291505056fea164736f6c634300080a000a",
  "devdoc": {
    "author": "Zeus, Indigo Review by: JeffX",
    "kind": "dev",
    "methods": {
      "close(uint256)": {
        "params": {
          "_id": "ID of market to close"
        }
      },
      "create(address,uint256[3],bool[2],uint256[2],uint32[2])": {
        "details": "current price should be in 9 decimals.",
        "params": {
          "_booleans": "[capacity in quote, fixed term]",
          "_intervals": "[deposit interval (seconds), tune interval (seconds)]",
          "_market": "[capacity (in RIP or quote), initial price / RIP (9 decimals), debt buffer (3 decimals)]",
          "_quoteToken": "token used to deposit",
          "_terms": "[vesting length (if fixed term) or vested timestamp, conclusion timestamp]"
        },
        "returns": {
          "id_": "        ID of new bond market"
        }
      },
      "currentControlVariable(uint256)": {
        "details": "accounts for control variable adjustment",
        "params": {
          "_id": "ID of market"
        },
        "returns": {
          "_0": "control variable for market in RIP decimals"
        }
      },
      "currentDebt(uint256)": {
        "details": "accounts for debt decay since last deposit",
        "params": {
          "_id": "ID of market"
        },
        "returns": {
          "_0": "current debt for market in RIP decimals"
        }
      },
      "debtDecay(uint256)": {
        "params": {
          "_id": "ID of market"
        },
        "returns": {
          "_0": "amount of debt to decay"
        }
      },
      "debtRatio(uint256)": {
        "details": "uses current debt, which accounts for debt decay since last deposit (vs _debtRatio())",
        "params": {
          "_id": "ID of market"
        },
        "returns": {
          "_0": "debt ratio for market in quote decimals"
        }
      },
      "deposit(uint256,uint256,uint256,address,address)": {
        "params": {
          "_amount": "the amount of quote token to spend",
          "_id": "the ID of the market",
          "_maxPrice": "the maximum price at which to buy",
          "_referral": "the front end operator address",
          "_user": "the recipient of the payout"
        },
        "returns": {
          "expiry_": "    the timestamp at which payout is redeemable",
          "index_": "     the user index of the Note (used to redeem or query information)",
          "payout_": "    the amount of gRIP due"
        }
      },
      "indexesFor(address)": {
        "params": {
          "_user": "the user to query notes for"
        },
        "returns": {
          "_0": "the pending notes for the user"
        }
      },
      "isLive(uint256)": {
        "params": {
          "_id": "ID of market"
        }
      },
      "liveMarketsFor(address)": {
        "params": {
          "_token": "quote token to check for"
        }
      },
      "marketPrice(uint256)": {
        "details": "accounts for debt and control variable decay since last deposit (vs _marketPrice())",
        "params": {
          "_id": "ID of market"
        },
        "returns": {
          "_0": "price for market in RIP decimals price is derived from the equation p = cv * dr where p = price cv = control variable dr = debt ratio dr = d / s where d = debt s = supply of token at market creation d -= ( d * (dt / l) ) where dt = change in time l = length of program"
        }
      },
      "payoutFor(uint256,uint256)": {
        "details": "accounts for debt and control variable decay so it is up to date1e18 = rip decimals (9) + market price decimals (9)",
        "params": {
          "_amount": "amount of quote tokens to spend",
          "_id": "ID of market"
        },
        "returns": {
          "_0": "amount of RIP to be paid in RIP decimals"
        }
      },
      "pendingFor(address,uint256)": {
        "params": {
          "_index": "the index of the note in the user's array",
          "_user": "the user that the note belongs to"
        },
        "returns": {
          "matured_": "   if the payout can be redeemed",
          "payout_": "    the payout due, in gRIP"
        }
      },
      "pullNote(address,uint256)": {
        "params": {
          "_from": "the address that approved the note transfer",
          "_index": "the index of the note to transfer (in the sender's array)"
        }
      },
      "pushNote(address,uint256)": {
        "params": {
          "_index": "index of note to approve transfer for",
          "_to": "address to approve note transfer for"
        }
      },
      "redeem(address,uint256[],bool)": {
        "params": {
          "_indexes": "the note indexes to redeem",
          "_sendgRIP": "send payout as gRIP or sRIP",
          "_user": "the user to redeem for"
        },
        "returns": {
          "payout_": "    sum of payout sent, in gRIP"
        }
      },
      "redeemAll(address,bool)": {
        "details": "if possible, query indexesFor() off-chain and input in redeem() to save gas",
        "params": {
          "_sendgRIP": "send payout as gRIP or sRIP",
          "_user": "user to redeem all notes for"
        },
        "returns": {
          "_0": "sum of payout sent, in gRIP"
        }
      }
    },
    "title": "RipProtocol Bond Depository V2",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "close(uint256)": {
        "notice": "disable existing market"
      },
      "create(address,uint256[3],bool[2],uint256[2],uint32[2])": {
        "notice": "creates a new market type"
      },
      "currentControlVariable(uint256)": {
        "notice": "up to date control variable"
      },
      "currentDebt(uint256)": {
        "notice": "calculate debt factoring in decay"
      },
      "debtDecay(uint256)": {
        "notice": "amount of debt to decay from total debt for market ID"
      },
      "debtRatio(uint256)": {
        "notice": "calculate current ratio of debt to supply"
      },
      "deposit(uint256,uint256,uint256,address,address)": {
        "notice": "deposit quote tokens in exchange for a bond from a specified market"
      },
      "indexesFor(address)": {
        "notice": "all pending notes for user"
      },
      "isLive(uint256)": {
        "notice": "is a given market accepting deposits"
      },
      "liveMarkets()": {
        "notice": "returns an array of all active market IDs"
      },
      "liveMarketsFor(address)": {
        "notice": "returns an array of all active market IDs for a given quote token"
      },
      "marketPrice(uint256)": {
        "notice": "calculate current market price of quote token in base token"
      },
      "payoutFor(uint256,uint256)": {
        "notice": "payout due for amount of quote tokens"
      },
      "pendingFor(address,uint256)": {
        "notice": "calculate amount available for claim for a single note"
      },
      "pullNote(address,uint256)": {
        "notice": "transfer a note that has been approved by an address"
      },
      "pushNote(address,uint256)": {
        "notice": "approve an address to transfer a note"
      },
      "redeem(address,uint256[],bool)": {
        "notice": "redeem notes for user"
      },
      "redeemAll(address,bool)": {
        "notice": "redeem all redeemable markets for user"
      },
      "setRewards(uint256,uint256)": {
        "notice": "set rewards for front end operators and DAO"
      },
      "whitelist(address)": {
        "notice": "add or remove addresses from the reward whitelist"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 5415,
        "contract": "contracts/BondDepository.sol:RipProtocolBondDepositoryV2",
        "label": "UNAUTHORIZED",
        "offset": 0,
        "slot": "0",
        "type": "t_string_storage"
      },
      {
        "astId": 5418,
        "contract": "contracts/BondDepository.sol:RipProtocolBondDepositoryV2",
        "label": "authority",
        "offset": 0,
        "slot": "1",
        "type": "t_contract(IRipProtocolAuthority)2365"
      },
      {
        "astId": 4582,
        "contract": "contracts/BondDepository.sol:RipProtocolBondDepositoryV2",
        "label": "daoReward",
        "offset": 0,
        "slot": "2",
        "type": "t_uint256"
      },
      {
        "astId": 4584,
        "contract": "contracts/BondDepository.sol:RipProtocolBondDepositoryV2",
        "label": "refReward",
        "offset": 0,
        "slot": "3",
        "type": "t_uint256"
      },
      {
        "astId": 4588,
        "contract": "contracts/BondDepository.sol:RipProtocolBondDepositoryV2",
        "label": "rewards",
        "offset": 0,
        "slot": "4",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 4592,
        "contract": "contracts/BondDepository.sol:RipProtocolBondDepositoryV2",
        "label": "whitelisted",
        "offset": 0,
        "slot": "5",
        "type": "t_mapping(t_address,t_bool)"
      },
      {
        "astId": 4756,
        "contract": "contracts/BondDepository.sol:RipProtocolBondDepositoryV2",
        "label": "notes",
        "offset": 0,
        "slot": "6",
        "type": "t_mapping(t_address,t_array(t_struct(Note)1955_storage)dyn_storage)"
      },
      {
        "astId": 4762,
        "contract": "contracts/BondDepository.sol:RipProtocolBondDepositoryV2",
        "label": "noteTransfers",
        "offset": 0,
        "slot": "7",
        "type": "t_mapping(t_address,t_mapping(t_uint256,t_address))"
      },
      {
        "astId": 4771,
        "contract": "contracts/BondDepository.sol:RipProtocolBondDepositoryV2",
        "label": "treasury",
        "offset": 0,
        "slot": "8",
        "type": "t_contract(ITreasury)2535"
      },
      {
        "astId": 48,
        "contract": "contracts/BondDepository.sol:RipProtocolBondDepositoryV2",
        "label": "markets",
        "offset": 0,
        "slot": "9",
        "type": "t_array(t_struct(Market)1598_storage)dyn_storage"
      },
      {
        "astId": 52,
        "contract": "contracts/BondDepository.sol:RipProtocolBondDepositoryV2",
        "label": "terms",
        "offset": 0,
        "slot": "10",
        "type": "t_array(t_struct(Terms)1609_storage)dyn_storage"
      },
      {
        "astId": 56,
        "contract": "contracts/BondDepository.sol:RipProtocolBondDepositoryV2",
        "label": "metadata",
        "offset": 0,
        "slot": "11",
        "type": "t_array(t_struct(Metadata)1622_storage)dyn_storage"
      },
      {
        "astId": 61,
        "contract": "contracts/BondDepository.sol:RipProtocolBondDepositoryV2",
        "label": "adjustments",
        "offset": 0,
        "slot": "12",
        "type": "t_mapping(t_uint256,t_struct(Adjustment)1631_storage)"
      },
      {
        "astId": 66,
        "contract": "contracts/BondDepository.sol:RipProtocolBondDepositoryV2",
        "label": "marketsForQuote",
        "offset": 0,
        "slot": "13",
        "type": "t_mapping(t_address,t_array(t_uint256)dyn_storage)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_struct(Market)1598_storage)dyn_storage": {
        "base": "t_struct(Market)1598_storage",
        "encoding": "dynamic_array",
        "label": "struct IBondDepository.Market[]",
        "numberOfBytes": "32"
      },
      "t_array(t_struct(Metadata)1622_storage)dyn_storage": {
        "base": "t_struct(Metadata)1622_storage",
        "encoding": "dynamic_array",
        "label": "struct IBondDepository.Metadata[]",
        "numberOfBytes": "32"
      },
      "t_array(t_struct(Note)1955_storage)dyn_storage": {
        "base": "t_struct(Note)1955_storage",
        "encoding": "dynamic_array",
        "label": "struct INoteKeeper.Note[]",
        "numberOfBytes": "32"
      },
      "t_array(t_struct(Terms)1609_storage)dyn_storage": {
        "base": "t_struct(Terms)1609_storage",
        "encoding": "dynamic_array",
        "label": "struct IBondDepository.Terms[]",
        "numberOfBytes": "32"
      },
      "t_array(t_uint256)dyn_storage": {
        "base": "t_uint256",
        "encoding": "dynamic_array",
        "label": "uint256[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_contract(IERC20)1885": {
        "encoding": "inplace",
        "label": "contract IERC20",
        "numberOfBytes": "20"
      },
      "t_contract(IRipProtocolAuthority)2365": {
        "encoding": "inplace",
        "label": "contract IRipProtocolAuthority",
        "numberOfBytes": "20"
      },
      "t_contract(ITreasury)2535": {
        "encoding": "inplace",
        "label": "contract ITreasury",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_array(t_struct(Note)1955_storage)dyn_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct INoteKeeper.Note[])",
        "numberOfBytes": "32",
        "value": "t_array(t_struct(Note)1955_storage)dyn_storage"
      },
      "t_mapping(t_address,t_array(t_uint256)dyn_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256[])",
        "numberOfBytes": "32",
        "value": "t_array(t_uint256)dyn_storage"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_mapping(t_uint256,t_address))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(uint256 => address))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_uint256,t_address)"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_uint256,t_address)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_mapping(t_uint256,t_struct(Adjustment)1631_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct IBondDepository.Adjustment)",
        "numberOfBytes": "32",
        "value": "t_struct(Adjustment)1631_storage"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(Adjustment)1631_storage": {
        "encoding": "inplace",
        "label": "struct IBondDepository.Adjustment",
        "members": [
          {
            "astId": 1624,
            "contract": "contracts/BondDepository.sol:RipProtocolBondDepositoryV2",
            "label": "change",
            "offset": 0,
            "slot": "0",
            "type": "t_uint64"
          },
          {
            "astId": 1626,
            "contract": "contracts/BondDepository.sol:RipProtocolBondDepositoryV2",
            "label": "lastAdjustment",
            "offset": 8,
            "slot": "0",
            "type": "t_uint48"
          },
          {
            "astId": 1628,
            "contract": "contracts/BondDepository.sol:RipProtocolBondDepositoryV2",
            "label": "timeToAdjusted",
            "offset": 14,
            "slot": "0",
            "type": "t_uint48"
          },
          {
            "astId": 1630,
            "contract": "contracts/BondDepository.sol:RipProtocolBondDepositoryV2",
            "label": "active",
            "offset": 20,
            "slot": "0",
            "type": "t_bool"
          }
        ],
        "numberOfBytes": "32"
      },
      "t_struct(Market)1598_storage": {
        "encoding": "inplace",
        "label": "struct IBondDepository.Market",
        "members": [
          {
            "astId": 1584,
            "contract": "contracts/BondDepository.sol:RipProtocolBondDepositoryV2",
            "label": "capacity",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 1587,
            "contract": "contracts/BondDepository.sol:RipProtocolBondDepositoryV2",
            "label": "quoteToken",
            "offset": 0,
            "slot": "1",
            "type": "t_contract(IERC20)1885"
          },
          {
            "astId": 1589,
            "contract": "contracts/BondDepository.sol:RipProtocolBondDepositoryV2",
            "label": "capacityInQuote",
            "offset": 20,
            "slot": "1",
            "type": "t_bool"
          },
          {
            "astId": 1591,
            "contract": "contracts/BondDepository.sol:RipProtocolBondDepositoryV2",
            "label": "totalDebt",
            "offset": 21,
            "slot": "1",
            "type": "t_uint64"
          },
          {
            "astId": 1593,
            "contract": "contracts/BondDepository.sol:RipProtocolBondDepositoryV2",
            "label": "maxPayout",
            "offset": 0,
            "slot": "2",
            "type": "t_uint64"
          },
          {
            "astId": 1595,
            "contract": "contracts/BondDepository.sol:RipProtocolBondDepositoryV2",
            "label": "sold",
            "offset": 8,
            "slot": "2",
            "type": "t_uint64"
          },
          {
            "astId": 1597,
            "contract": "contracts/BondDepository.sol:RipProtocolBondDepositoryV2",
            "label": "purchased",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "128"
      },
      "t_struct(Metadata)1622_storage": {
        "encoding": "inplace",
        "label": "struct IBondDepository.Metadata",
        "members": [
          {
            "astId": 1611,
            "contract": "contracts/BondDepository.sol:RipProtocolBondDepositoryV2",
            "label": "lastTune",
            "offset": 0,
            "slot": "0",
            "type": "t_uint48"
          },
          {
            "astId": 1613,
            "contract": "contracts/BondDepository.sol:RipProtocolBondDepositoryV2",
            "label": "lastDecay",
            "offset": 6,
            "slot": "0",
            "type": "t_uint48"
          },
          {
            "astId": 1615,
            "contract": "contracts/BondDepository.sol:RipProtocolBondDepositoryV2",
            "label": "length",
            "offset": 12,
            "slot": "0",
            "type": "t_uint48"
          },
          {
            "astId": 1617,
            "contract": "contracts/BondDepository.sol:RipProtocolBondDepositoryV2",
            "label": "depositInterval",
            "offset": 18,
            "slot": "0",
            "type": "t_uint48"
          },
          {
            "astId": 1619,
            "contract": "contracts/BondDepository.sol:RipProtocolBondDepositoryV2",
            "label": "tuneInterval",
            "offset": 24,
            "slot": "0",
            "type": "t_uint48"
          },
          {
            "astId": 1621,
            "contract": "contracts/BondDepository.sol:RipProtocolBondDepositoryV2",
            "label": "quoteDecimals",
            "offset": 30,
            "slot": "0",
            "type": "t_uint8"
          }
        ],
        "numberOfBytes": "32"
      },
      "t_struct(Note)1955_storage": {
        "encoding": "inplace",
        "label": "struct INoteKeeper.Note",
        "members": [
          {
            "astId": 1946,
            "contract": "contracts/BondDepository.sol:RipProtocolBondDepositoryV2",
            "label": "payout",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 1948,
            "contract": "contracts/BondDepository.sol:RipProtocolBondDepositoryV2",
            "label": "created",
            "offset": 0,
            "slot": "1",
            "type": "t_uint48"
          },
          {
            "astId": 1950,
            "contract": "contracts/BondDepository.sol:RipProtocolBondDepositoryV2",
            "label": "matured",
            "offset": 6,
            "slot": "1",
            "type": "t_uint48"
          },
          {
            "astId": 1952,
            "contract": "contracts/BondDepository.sol:RipProtocolBondDepositoryV2",
            "label": "redeemed",
            "offset": 12,
            "slot": "1",
            "type": "t_uint48"
          },
          {
            "astId": 1954,
            "contract": "contracts/BondDepository.sol:RipProtocolBondDepositoryV2",
            "label": "marketID",
            "offset": 18,
            "slot": "1",
            "type": "t_uint48"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(Terms)1609_storage": {
        "encoding": "inplace",
        "label": "struct IBondDepository.Terms",
        "members": [
          {
            "astId": 1600,
            "contract": "contracts/BondDepository.sol:RipProtocolBondDepositoryV2",
            "label": "fixedTerm",
            "offset": 0,
            "slot": "0",
            "type": "t_bool"
          },
          {
            "astId": 1602,
            "contract": "contracts/BondDepository.sol:RipProtocolBondDepositoryV2",
            "label": "controlVariable",
            "offset": 1,
            "slot": "0",
            "type": "t_uint64"
          },
          {
            "astId": 1604,
            "contract": "contracts/BondDepository.sol:RipProtocolBondDepositoryV2",
            "label": "vesting",
            "offset": 9,
            "slot": "0",
            "type": "t_uint48"
          },
          {
            "astId": 1606,
            "contract": "contracts/BondDepository.sol:RipProtocolBondDepositoryV2",
            "label": "conclusion",
            "offset": 15,
            "slot": "0",
            "type": "t_uint48"
          },
          {
            "astId": 1608,
            "contract": "contracts/BondDepository.sol:RipProtocolBondDepositoryV2",
            "label": "maxDebt",
            "offset": 21,
            "slot": "0",
            "type": "t_uint64"
          }
        ],
        "numberOfBytes": "32"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint48": {
        "encoding": "inplace",
        "label": "uint48",
        "numberOfBytes": "6"
      },
      "t_uint64": {
        "encoding": "inplace",
        "label": "uint64",
        "numberOfBytes": "8"
      },
      "t_uint8": {
        "encoding": "inplace",
        "label": "uint8",
        "numberOfBytes": "1"
      }
    }
  }
}